{
    "results": {
        "test_list_init": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[       OK ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_init_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820719==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x555f335058d9 bp 0x7ffdfa185d00 sp 0x7ffdfa185d00 T0)\n==3820719==The signal is caused by a WRITE memory access.\n==3820719==Hint: address points to the zero page.\n    #0 0x555f335058d8 in list_init parts/gen_list_init.c:27\n    #1 0x555f3351174d in test_list_init_nullhead tests_ref/test_list_init_nullhead.c:23\n    #2 0x555f3350fb61 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x555f335100a1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x555f33510acf in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x555f335118fc in main tests_ref/test_list_init_nullhead.c:30\n    #6 0x7fc1923cbfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fc1923cc07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x555f33505804 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_init_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_init.c:27 in list_init\n==3820719==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820943==ERROR: AddressSanitizer: SEGV on unknown address 0x5626a94ae710 (pc 0x7f5576f2aa16 bp 0x5626a94ae710 sp 0x7fffc2eb4f10 T0)\n==3820943==The signal is caused by a WRITE memory access.\n    #0 0x7f5576f2aa15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f5576f2aa15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f5576f2aa15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f5576f2aa15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f557700f3d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x5626a94a9491 in list_free test_common.h:35\n    #6 0x5626a94a9db7 in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:34\n    #7 0x5626a94a7cb2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x5626a94a81f2 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x5626a94a8c20 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x5626a94a9fb8 in main tests_ref/test_list_add_item_at_pos.c:41\n    #11 0x7f5576d03fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7f5576d0407c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x5626a949d804 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_add_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3820943==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821171==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x560fb5bfc933 bp 0x7fff879f4d30 sp 0x7fff879f4d00 T0)\n==3821171==The signal is caused by a READ memory access.\n==3821171==Hint: address points to the zero page.\n    #0 0x560fb5bfc932 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:68\n    #1 0x560fb5c088b7 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x560fb5c06cb2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x560fb5c071f2 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x560fb5c07c20 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x560fb5c08a66 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f883ef41fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f883ef4207c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x560fb5bfc804 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:68 in list_add_item_at_pos\n==3821171==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821412==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f19f1568667 bp 0x000000000031 sp 0x7ffec9045ee0 T0)\n==3821412==The signal is caused by a WRITE memory access.\n==3821412==Hint: address points to the zero page.\n    #0 0x7f19f1568666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7f19f1566de3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7f19f1566de3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7f19f154eb23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7f19f154eb23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7f19f155aae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7f19f155aae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7f19f179f664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7f19f179fbde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x55a00bb3d93d in list_item_to_string parts/gen_list_item_to_string.c:33\n    #10 0x55a00bb498e5 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x55a00bb47bbf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x55a00bb480ff in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x55a00bb48b2d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x55a00bb49b0c in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7f19f1502fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7f19f150307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x55a00bb3d824 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3821412==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3821762==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcf4a4a9e4 at pc 0x7ff719c23725 bp 0x7ffcf4a4a7f0 sp 0x7ffcf4a49f80\nWRITE of size 527 at 0x7ffcf4a4a9e4 thread T0\n    #0 0x7ff719c23724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7ff719c23bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x5577214de95d in list_item_to_string parts/gen_list_item_to_string.c:33\n    #3 0x5577214ea9ac in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x5577214e8bdf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x5577214e911f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x5577214e9b4d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x5577214eac61 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7ff719986fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7ff71998707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x5577214de844 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffcf4a4a9e4 is located in stack of thread T0 at offset 196 in frame\n    #0 0x5577214ea7c1 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10001e9414e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001e9414f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001e941500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001e941510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001e941520: 00 00 00 00 f1 f1 f1 f1 00 f2 f2 f2 f2 f2 f2 f2\n=>0x10001e941530: 00 00 00 00 00 00 00 00 00 00 00 00[04]f2 f2 f2\n  0x10001e941540: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001e941550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001e941560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001e941570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001e941580: 00 00 00 00 f3 f3 f3 f3 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3821762==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_print_nullhead": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_print_longitem": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822095==ERROR: AddressSanitizer: SEGV on unknown address 0x55775cd5d750 (pc 0x7fadff291a16 bp 0x55775cd5d750 sp 0x7ffdd29d14d0 T0)\n==3822095==The signal is caused by a WRITE memory access.\n    #0 0x7fadff291a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7fadff291a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7fadff291a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7fadff291a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7fadff3763d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x55775cd593e0 in list_free test_common.h:35\n    #6 0x55775cd59aa8 in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x55775cd57c01 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x55775cd58141 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x55775cd58b6f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x55775cd59ca9 in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7fadff06afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7fadff06b07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x55775cd4d804 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_update_item_at_pos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3822095==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822322==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x561093d6a933 bp 0x7ffd0dddd570 sp 0x7ffd0dddd540 T0)\n==3822322==The signal is caused by a READ memory access.\n==3822322==Hint: address points to the zero page.\n    #0 0x561093d6a932 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:35\n    #1 0x561093d76811 in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x561093d74c01 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x561093d75141 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x561093d75b6f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x561093d769c0 in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7fec85112fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fec8511307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x561093d6a804 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:35 in list_update_item_at_pos\n==3822322==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[  FAILED  ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- ./test_common.h:55: error: No mock calls expected but called() was invoked in test_printf\n\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822559==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x558bcffbb927 bp 0x7ffc941384b0 sp 0x7ffc94138490 T0)\n==3822559==The signal is caused by a READ memory access.\n==3822559==Hint: address points to the zero page.\n    #0 0x558bcffbb926 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:36\n    #1 0x558bcffc7829 in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x558bcffc5c38 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x558bcffc6178 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x558bcffc6ba6 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x558bcffc79d8 in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7f05ec852fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f05ec85307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x558bcffbb804 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:36 in list_remove_item_at_pos\n==3822559==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822803==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55e52c12d984 bp 0x7ffd75683be0 sp 0x7ffd75683bc0 T0)\n==3822803==The signal is caused by a READ memory access.\n==3822803==Hint: address points to the zero page.\n    #0 0x55e52c12d983 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:45\n    #1 0x55e52c13993b in test_list_remove_item_at_pos_oob tests_ref/test_list_remove_item_at_pos_oob.c:26\n    #2 0x55e52c137c38 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55e52c138178 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55e52c138ba6 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55e52c139d56 in main tests_ref/test_list_remove_item_at_pos_oob.c:41\n    #6 0x7fe82f723fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fe82f72407c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55e52c12d804 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_remove_item_at_pos_oob.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:45 in list_remove_item_at_pos\n==3822803==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[       OK ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3823062==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5561a3d3092a bp 0x7ffd2d0c7400 sp 0x7ffd2d0c73d0 T0)\n==3823062==The signal is caused by a READ memory access.\n==3823062==Hint: address points to the zero page.\n    #0 0x5561a3d30929 in list_swap_item_positions parts/gen_list_swap_item_positions.c:35\n    #1 0x5561a3d3c91d in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x5561a3d3ad27 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5561a3d3b267 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5561a3d3bc95 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5561a3d3cacc in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7f07b3a7cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f07b3a7d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x5561a3d30804 in _start (/home/gustavo/git/codex_study_grading/repos/212591de-3007-4e4d-a0df-67d22d6c5f91/tests_ref/test_list_swap_item_positions_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:35 in list_swap_item_positions\n==3823062==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[  FAILED  ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[       OK ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[       OK ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[  FAILED  ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_save.c:32: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_longitem": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badparse": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_missingfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_single": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nodups": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        }
    },
    "passed": 11,
    "total": 45,
    "passed_functional": 6,
    "total_functional": 26
}
