{
    "results": {
        "test_list_init": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[       OK ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_init_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3035011==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55bf1f1178d9 bp 0x7ffd3546feb0 sp 0x7ffd3546feb0 T0)\n==3035011==The signal is caused by a WRITE memory access.\n==3035011==Hint: address points to the zero page.\n    #0 0x55bf1f1178d8 in list_init parts/gen_list_init.c:25\n    #1 0x55bf1f12374f in test_list_init_nullhead tests_ref/test_list_init_nullhead.c:23\n    #2 0x55bf1f121b26 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55bf1f12205b in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55bf1f122a9f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55bf1f123916 in main tests_ref/test_list_init_nullhead.c:30\n    #6 0x7f4f0fbd9082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55bf1f11780d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_init_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_init.c:25 in list_init\n==3035011==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[  FAILED  ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3035286==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5558eeb2a8ec bp 0x7ffc75401770 sp 0x7ffc75401730 T0)\n==3035286==The signal is caused by a READ memory access.\n==3035286==Hint: address points to the zero page.\n    #0 0x5558eeb2a8eb in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:35\n    #1 0x5558eeb36833 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x5558eeb34bf1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5558eeb35126 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5558eeb35b6a in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5558eeb369fa in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f5aca7ae082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x5558eeb2a80d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:35 in list_add_item_at_pos\n==3035286==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[       OK ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[  FAILED  ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_item_to_string_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_item_to_string_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3035617==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fe2a34a5ae7 bp 0x000000000031 sp 0x7ffd8f6b9450 T0)\n==3035617==The signal is caused by a WRITE memory access.\n==3035617==Hint: address points to the zero page.\n    #0 0x7fe2a34a5ae6 in __GI__IO_str_overflow /build/glibc-SzIz7B/glibc-2.31/libio/strops.c:133\n    #1 0x7fe2a34a4023 in __GI__IO_default_xsputn /build/glibc-SzIz7B/glibc-2.31/libio/genops.c:399\n    #2 0x7fe2a34a4023 in __GI__IO_default_xsputn /build/glibc-SzIz7B/glibc-2.31/libio/genops.c:370\n    #3 0x7fe2a34897ac in __vfprintf_internal /build/glibc-SzIz7B/glibc-2.31/stdio-common/vfprintf-internal.c:1687\n    #4 0x7fe2a34971b7 in __vsprintf_internal /build/glibc-SzIz7B/glibc-2.31/libio/iovsprintf.c:95\n    #5 0x7fe2a34971b7 in __vsprintf /build/glibc-SzIz7B/glibc-2.31/libio/iovsprintf.c:104\n    #6 0x7fe2a36a2664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #7 0x7fe2a36a2bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #8 0x561b86a41964 in list_item_to_string parts/gen_list_item_to_string.c:35\n    #9 0x561b86a4d935 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #10 0x561b86a4bbd2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #11 0x561b86a4c107 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #12 0x561b86a4cb4b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #13 0x561b86a4db74 in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #14 0x7fe2a3436082 in __libc_start_main ../csu/libc-start.c:308\n    #15 0x561b86a4182d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_item_to_string_nullstr.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV /build/glibc-SzIz7B/glibc-2.31/libio/strops.c:133 in __GI__IO_str_overflow\n==3035617==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3036060==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd0d5683c4 at pc 0x7f8ec871d725 bp 0x7ffd0d5681b0 sp 0x7ffd0d567940\nWRITE of size 527 at 0x7ffd0d5683c4 thread T0\n    #0 0x7f8ec871d724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7f8ec871dbde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x5614b3654984 in list_item_to_string parts/gen_list_item_to_string.c:35\n    #3 0x5614b3660a10 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x5614b365ebf2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x5614b365f127 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x5614b365fb6b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x5614b3660cde in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7f8ec84b1082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x5614b365484d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_item_to_string_longstr.bin+0x584d)\n\nAddress 0x7ffd0d5683c4 is located in stack of thread T0 at offset 180 in frame\n    #0 0x5614b3660811 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [48, 56) 'head' (line 27)\n    [80, 180) 'str' (line 23)\n    [224, 736) 'longstr' (line 24) <== Memory access at offset 180 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x100021aa5020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100021aa5030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100021aa5040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100021aa5050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100021aa5060: 00 00 f1 f1 f1 f1 00 00 00 f2 f2 f2 00 00 00 00\n=>0x100021aa5070: 00 00 00 00 00 00 00 00[04]f2 f2 f2 f2 f2 00 00\n  0x100021aa5080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100021aa5090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100021aa50a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100021aa50b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f3 f3\n  0x100021aa50c0: f3 f3 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3036060==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[  FAILED  ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"0: 3 * banana @ $1.00 ea\n1: 2 * orange @ $2.00 ea\n2: 4 * apple @ $3.00 ea\n\" != \"1: 3 * banana @ $1.00 ea\n2: 2 * orange @ $2.00 ea\n3: 4 * apple @ $3.00 ea\n\"\n[   LINE   ] --- tests_ref/test_list_print.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3036458==ERROR: AddressSanitizer: SEGV on unknown address 0x5624a99c8830 (pc 0x7ff38752ba16 bp 0x5624a99c8830 sp 0x7ffc15553130 T0)\n==3036458==The signal is caused by a WRITE memory access.\n    #0 0x7ff38752ba15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7ff38752ba15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7ff38752ba15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7ff38752ba15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7ff3876103d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x5624a99c4399 in list_free test_common.h:35\n    #6 0x5624a99c4a78 in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x5624a99c2b92 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x5624a99c30c7 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x5624a99c3b0b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x5624a99c4c91 in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7ff387335082 in __libc_start_main ../csu/libc-start.c:308\n    #12 0x5624a99b880d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_update_item_at_pos.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3036458==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3036742==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55c4e6dbb8e8 bp 0x7ffdc090bde0 sp 0x7ffdc090bde0 T0)\n==3036742==The signal is caused by a READ memory access.\n==3036742==Hint: address points to the zero page.\n    #0 0x55c4e6dbb8e7 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:25\n    #1 0x55c4e6dc77df in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x55c4e6dc5b92 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55c4e6dc60c7 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55c4e6dc6b0b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55c4e6dc79a6 in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7fc70c0de082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55c4e6dbb80d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:25 in list_update_item_at_pos\n==3036742==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[       OK ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[       OK ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3037052==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x555e958c38e0 bp 0x7fff470b9910 sp 0x7fff470b98e0 T0)\n==3037052==The signal is caused by a READ memory access.\n==3037052==Hint: address points to the zero page.\n    #0 0x555e958c38df in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:25\n    #1 0x555e958cf7e2 in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x555e958cdbb4 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x555e958ce0e9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x555e958ceb2d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x555e958cf9a9 in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7ffbd0468082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x555e958c380d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:25 in list_remove_item_at_pos\n==3037052==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[       OK ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1\" != \"item2\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3037472==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55a5aae958df bp 0x7ffeb1144600 sp 0x7ffeb1144600 T0)\n==3037472==The signal is caused by a READ memory access.\n==3037472==Hint: address points to the zero page.\n    #0 0x55a5aae958de in list_swap_item_positions parts/gen_list_swap_item_positions.c:25\n    #1 0x55a5aaea1882 in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x55a5aae9fc4f in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55a5aaea0184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55a5aaea0bc8 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55a5aaea1a49 in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7f85ceb95082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55a5aae9580d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_swap_item_positions_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:25 in list_swap_item_positions\n==3037472==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[  FAILED  ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[  FAILED  ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x2 != 0x3\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3037821==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55fcdea6a941 bp 0x7fff6a005d80 sp 0x7fff6a005d80 T0)\n==3037821==The signal is caused by a WRITE memory access.\n==3037821==Hint: address points to the zero page.\n    #0 0x55fcdea6a940 in list_find_highest_price_item_position parts/gen_list_find_highest_price_item_position.c:37\n    #1 0x55fcdea768ab in test_list_find_highest_price_item_position_nullpos tests_ref/test_list_find_highest_price_item_position_nullpos.c:25\n    #2 0x55fcdea74b89 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55fcdea750be in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55fcdea75b02 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55fcdea76ac2 in main tests_ref/test_list_find_highest_price_item_position_nullpos.c:32\n    #6 0x7f2977a4e082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55fcdea6a80d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_find_highest_price_item_position_nullpos.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_find_highest_price_item_position.c:37 in list_find_highest_price_item_position\n==3037821==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[  FAILED  ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3038120==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55d88371892e bp 0x7fffdfec0da0 sp 0x7fffdfec0da0 T0)\n==3038120==The signal is caused by a WRITE memory access.\n==3038120==Hint: address points to the zero page.\n    #0 0x55d88371892d in list_cost_sum parts/gen_list_cost_sum.c:31\n    #1 0x55d88372495d in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x55d883722b78 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55d8837230ad in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55d883723af1 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55d883724b9c in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7fdde5772082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55d88371880d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_cost_sum_nulltotal.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:31 in list_cost_sum\n==3038120==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3038491==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x562443a68d24 bp 0x7ffe8b385b80 sp 0x7ffe8b385ae0 T0)\n==3038491==The signal is caused by a READ memory access.\n==3038491==Hint: address points to the zero page.\n    #0 0x562443a68d23 in test_list_load tests_ref/test_list_load.c:36\n    #1 0x562443a66dac in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x562443a672e1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x562443a67d25 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x562443a69672 in main tests_ref/test_list_load.c:53\n    #5 0x7f3875fb7082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x562443a5c86d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_load.bin+0x686d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_load.c:36 in test_list_load\n==3038491==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n[  FAILED  ] test_list_load_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3038887==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55720f82bc0e bp 0x7fff2f0bad60 sp 0x7fff2f0baa80 T0)\n==3038887==The signal is caused by a READ memory access.\n==3038887==Hint: address points to the zero page.\n    #0 0x55720f82bc0d in test_list_load_longitem tests_ref/test_list_load_longitem.c:30\n    #1 0x55720f829dcc in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x55720f82a301 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x55720f82ad45 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x55720f82bfc4 in main tests_ref/test_list_load_longitem.c:40\n    #5 0x7f4bf1f5d082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x55720f81f88d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_load_longitem.bin+0x688d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_load_longitem.c:30 in test_list_load_longitem\n==3038887==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n[  FAILED  ] test_list_load_badparse\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_badparse.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_badparse\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head->next\n[   LINE   ] --- tests_ref/test_list_deduplicate.c:31: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3039273==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55c66c6b68dd bp 0x7ffec6137910 sp 0x7ffec61378f0 T0)\n==3039273==The signal is caused by a READ memory access.\n==3039273==Hint: address points to the zero page.\n    #0 0x55c66c6b68dc in list_deduplicate parts/gen_list_deduplicate.c:27\n    #1 0x55c66c6c27d6 in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x55c66c6c0bad in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55c66c6c10e2 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55c66c6c1b26 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55c66c6c299d in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7f9fa2593082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55c66c6b680d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_03/tests_ref/test_list_deduplicate_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:27 in list_deduplicate\n==3039273==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 17,
    "total": 45,
    "passed_functional": 13,
    "total_functional": 26
}
