{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==534859==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f872f5d7e2f bp 0x7ffd888b2320 sp 0x7ffd888b1a90 T0)\n==534859==The signal is caused by a READ memory access.\n==534859==Hint: address points to the zero page.\n    #0 0x7f872f5d7e2e in AddressIsPoisoned ../../../../src/libsanitizer/asan/asan_mapping.h:396\n    #1 0x7f872f5d7e2e in QuickCheckForUnpoisonedRegion ../../../../src/libsanitizer/asan/asan_interceptors_memintrinsics.h:30\n    #2 0x7f872f5d7e2e in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:431\n    #3 0x55b9ff65d936 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:44\n    #4 0x55b9ff669943 in test_list_add_item_at_pos tests_orig/test_list_add_item_at_pos.c:23\n    #5 0x55b9ff667c2f in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x55b9ff668164 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x55b9ff668ba8 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x55b9ff669bdc in main tests_orig/test_list_add_item_at_pos.c:32\n    #9 0x7f872f36e082 in __libc_start_main ../csu/libc-start.c:308\n    #10 0x55b9ff65d82d in _start (/home/moyix/git/codex_study_grading/repos/18ced82d-deec-4f66-9270-7770063fdf26/tests_orig/test_list_add_item_at_pos.bin+0x682d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/asan/asan_mapping.h:396 in AddressIsPoisoned\n==534859==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[  FAILED  ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1 * 1 @ $1.00 ea\" != \"1 * item1 @ $1.00 ea\"\n[   LINE   ] --- tests_orig/test_list_item_to_string.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_item_to_string\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==535140==ERROR: AddressSanitizer: SEGV on unknown address 0x006165203030 (pc 0x7f1d85e2989c bp 0x7ffec050afe0 sp 0x7ffec050a740 T0)\n==535140==The signal is caused by a READ memory access.\n    #0 0x7f1d85e2989b in __interceptor_strcmp ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:420\n    #1 0x556fc4052fed in _function_called cmocka/cmocka.c:1039\n    #2 0x556fc405a55e in test_printf test_common.h:55\n    #3 0x556fc404e923 in list_print parts/gen_list_print.c:47\n    #4 0x556fc405a98f in test_list_print tests_orig/test_list_print.c:27\n    #5 0x556fc4058b92 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x556fc40590c7 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x556fc4059b0b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x556fc405abec in main tests_orig/test_list_print.c:40\n    #9 0x7f1d85b85082 in __libc_start_main ../csu/libc-start.c:308\n    #10 0x556fc404e80d in _start (/home/moyix/git/codex_study_grading/repos/18ced82d-deec-4f66-9270-7770063fdf26/tests_orig/test_list_print.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:420 in __interceptor_strcmp\n==535140==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n[  FAILED  ] test_list_update_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x10c852b0 != 0\n[   LINE   ] --- tests_orig/test_list_update_item_at_pos.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        }
    },
    "passed": 0,
    "total": 12,
    "passed_functional": 0,
    "total_functional": 12
}
