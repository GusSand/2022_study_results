{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[       OK ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3827011==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5567edace95e bp 0x7ffff86e5760 sp 0x7ffff86e5720 T0)\n==3827011==The signal is caused by a READ memory access.\n==3827011==Hint: address points to the zero page.\n    #0 0x5567edace95d in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:44\n    #1 0x5567edada86e in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x5567edad8c69 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5567edad91a9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5567edad9bd7 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5567edadaa1d in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f16481fcfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f16481fd07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x5567edace824 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:44 in list_add_item_at_pos\n==3827011==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3827172==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f3d0e80905d bp 0x7ffe7181d600 sp 0x7ffe7181cd68 T0)\n==3827172==The signal is caused by a READ memory access.\n==3827172==Hint: address points to the zero page.\n    #0 0x7f3d0e80905c  (/lib/x86_64-linux-gnu/libc.so.6+0x19c05c)\n    #1 0x7f3d0e930cf5 in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:428\n    #2 0x55e1df230936 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:39\n    #3 0x55e1df23c93c in test_list_add_item_at_pos_nullitem tests_ref/test_list_add_item_at_pos_nullitem.c:25\n    #4 0x55e1df23ac69 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55e1df23b1a9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55e1df23bbd7 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55e1df23cb3d in main tests_ref/test_list_add_item_at_pos_nullitem.c:32\n    #8 0x7f3d0e696fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f3d0e69707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55e1df230824 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_add_item_at_pos_nullitem.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libc.so.6+0x19c05c) \n==3827172==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[       OK ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3827460==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fd502722667 bp 0x000000000031 sp 0x7fffb8a53b70 T0)\n==3827460==The signal is caused by a WRITE memory access.\n==3827460==Hint: address points to the zero page.\n    #0 0x7fd502722666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7fd502720de3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7fd502720de3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7fd502708b23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7fd502708b23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7fd502714ae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7fd502714ae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7fd502959664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7fd502959bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x55a4e3f3a93d in list_item_to_string parts/gen_list_item_to_string.c:33\n    #10 0x55a4e3f468e5 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x55a4e3f44bbf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x55a4e3f450ff in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x55a4e3f45b2d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x55a4e3f46b0c in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7fd5026bcfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7fd5026bd07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x55a4e3f3a824 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3827460==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3827718==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc71cd1e54 at pc 0x7fa8fc9a9725 bp 0x7ffc71cd1c60 sp 0x7ffc71cd13f0\nWRITE of size 527 at 0x7ffc71cd1e54 thread T0\n    #0 0x7fa8fc9a9724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7fa8fc9a9bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x55d1effd495d in list_item_to_string parts/gen_list_item_to_string.c:33\n    #3 0x55d1effe09ac in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x55d1effdebdf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55d1effdf11f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55d1effdfb4d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55d1effe0c61 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7fa8fc70cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7fa8fc70d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55d1effd4844 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffc71cd1e54 is located in stack of thread T0 at offset 196 in frame\n    #0 0x55d1effe07c1 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10000e392370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000e392380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000e392390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000e3923a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000e3923b0: 00 00 f1 f1 f1 f1 00 f2 f2 f2 f2 f2 f2 f2 00 00\n=>0x10000e3923c0: 00 00 00 00 00 00 00 00 00 00[04]f2 f2 f2 f2 f2\n  0x10000e3923d0: f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000e3923e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000e3923f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000e392400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000e392410: 00 00 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3827718==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n[       OK ] test_list_update_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n[       OK ] test_list_update_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3828022==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f49a0a7005d bp 0x7fffbac7c2e0 sp 0x7fffbac7ba48 T0)\n==3828022==The signal is caused by a READ memory access.\n==3828022==Hint: address points to the zero page.\n    #0 0x7f49a0a7005c  (/lib/x86_64-linux-gnu/libc.so.6+0x19c05c)\n    #1 0x7f49a0b97cf5 in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:428\n    #2 0x56388bbe098f in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:42\n    #3 0x56388bbec949 in test_list_update_item_at_pos_nullstr tests_ref/test_list_update_item_at_pos_nullstr.c:26\n    #4 0x56388bbeac34 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x56388bbeb174 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x56388bbebba2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x56388bbecccc in main tests_ref/test_list_update_item_at_pos_nullstr.c:38\n    #8 0x7f49a08fdfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f49a08fe07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x56388bbe0824 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_update_item_at_pos_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libc.so.6+0x19c05c) \n==3828022==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3828274==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x55b0b5b3b992 bp 0x7fff5f207310 sp 0x7fff5f2072e0 T0)\n==3828274==The signal is caused by a WRITE memory access.\n==3828274==Hint: address points to the zero page.\n    #0 0x55b0b5b3b991 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:52\n    #1 0x55b0b5b47a65 in test_list_remove_item_at_pos tests_ref/test_list_remove_item_at_pos.c:32\n    #2 0x55b0b5b45c23 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55b0b5b46163 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55b0b5b46b91 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55b0b5b47dac in main tests_ref/test_list_remove_item_at_pos.c:45\n    #6 0x7ff21cc1cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7ff21cc1d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55b0b5b3b804 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_remove_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:52 in list_remove_item_at_pos\n==3828274==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n[       OK ] test_list_remove_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[       OK ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[       OK ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3828452==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5630ae2b78dc bp 0x7fff0da83040 sp 0x7fff0da83040 T0)\n==3828452==The signal is caused by a READ memory access.\n==3828452==Hint: address points to the zero page.\n    #0 0x5630ae2b78db in get_item_at_pos parts/gen_list_swap_item_positions.c:25\n    #1 0x5630ae2b793e in list_swap_item_positions parts/gen_list_swap_item_positions.c:38\n    #2 0x5630ae2c3858 in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #3 0x5630ae2c1c62 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5630ae2c21a2 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5630ae2c2bd0 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5630ae2c3a07 in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #7 0x7f909edc9fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #8 0x7f909edca07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #9 0x5630ae2b7804 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_swap_item_positions_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:25 in get_item_at_pos\n==3828452==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[       OK ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[       OK ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[       OK ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[       OK ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3828640==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55cfe96628f7 bp 0x7fffea014d10 sp 0x7fffea014d10 T0)\n==3828640==The signal is caused by a WRITE memory access.\n==3828640==Hint: address points to the zero page.\n    #0 0x55cfe96628f6 in list_cost_sum parts/gen_list_cost_sum.c:32\n    #1 0x55cfe966e965 in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x55cfe966cbbd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55cfe966d0fd in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55cfe966db2b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55cfe966eb8c in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7f7be4c45fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f7be4c4607c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55cfe9662804 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_cost_sum_nulltotal.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:32 in list_cost_sum\n==3828640==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n[  FAILED  ] test_list_load\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"apple\" != \"item1\"\n[   LINE   ] --- tests_ref/test_list_load.c:33: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n[  FAILED  ] test_list_load_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n[       OK ] test_list_load_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3828816==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fc46bcc356c bp 0x7fffd46f06a0 sp 0x7fffd46efdc0 T0)\n==3828816==The signal is caused by a READ memory access.\n==3828816==Hint: address points to the zero page.\n    #0 0x7fc46bcc356b in __GI_____strtol_l_internal ../stdlib/strtol_l.c:283\n    #1 0x7fc46bef5207 in __interceptor_atoi ../../../../src/libsanitizer/asan/asan_interceptors.cc:510\n    #2 0x558a90508a36 in list_load parts/gen_list_load.c:54\n    #3 0x558a90514aa4 in test_list_load_badparse tests_ref/test_list_load_badparse.c:27\n    #4 0x558a90512d4c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x558a9051328c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x558a90513cba in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x558a90514e9b in main tests_ref/test_list_load_badparse.c:39\n    #8 0x7fc46bca5fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7fc46bca607c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x558a90508884 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_load_badparse.bin+0x6884)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../stdlib/strtol_l.c:283 in __GI_____strtol_l_internal\n==3828816==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n",
            "stderr": "=================================================================\n==3829087==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x7f7025adb3ad bp 0x7ffc4617b720 sp 0x7ffc4617aec8\nREAD of size 2 at 0x602000000010 thread T0\n    #0 0x7f7025adb3ac in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:443\n    #1 0x55a433026295 in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/reflist.c:164\n    #2 0x55a433025a0f in list_deduplicate parts/gen_list_deduplicate.c:58\n    #3 0x55a433031a4b in test_list_deduplicate tests_ref/test_list_deduplicate.c:27\n    #4 0x55a43302fd0d in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55a43303024d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55a433030c7b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55a433031e3c in main tests_ref/test_list_deduplicate.c:39\n    #8 0x7f7025846fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f702584707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55a433025804 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_deduplicate.bin+0x5804)\n\n0x602000000010 is located 0 bytes inside of 6-byte region [0x602000000010,0x602000000016)\nfreed by thread T0 here:\n    #0 0x7f7025b5240f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x55a433026289 in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/reflist.c:162\n    #2 0x55a433025a0f in list_deduplicate parts/gen_list_deduplicate.c:58\n    #3 0x55a433031a4b in test_list_deduplicate tests_ref/test_list_deduplicate.c:27\n    #4 0x55a43302fd0d in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55a43303024d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55a433030c7b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55a433031e3c in main tests_ref/test_list_deduplicate.c:39\n    #8 0x7f7025846fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\npreviously allocated by thread T0 here:\n    #0 0x7f7025adb3ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x55a433025f68 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/reflist.c:118\n    #2 0x55a4330319e4 in test_list_deduplicate tests_ref/test_list_deduplicate.c:25\n    #3 0x55a43302fd0d in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55a43303024d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55a433030c7b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55a433031e3c in main tests_ref/test_list_deduplicate.c:39\n    #7 0x7f7025846fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-use-after-free ../../../../src/libsanitizer/asan/asan_interceptors.cc:443 in __interceptor_strdup\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa[fd]fa fa fa 06 fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3829087==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3829305==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x56446ced7948 bp 0x7ffec6e437c0 sp 0x7ffec6e43780 T0)\n==3829305==The signal is caused by a READ memory access.\n==3829305==Hint: address points to the zero page.\n    #0 0x56446ced7947 in list_deduplicate parts/gen_list_deduplicate.c:44\n    #1 0x56446cee38f9 in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x56446cee1d0d in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56446cee224d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56446cee2c7b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56446cee3aa8 in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7f9dc7657fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f9dc765807c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x56446ced7804 in _start (/home/gustavo/git/codex_study_grading/repos/e04ce3f6-46eb-465e-9828-5e768febf9be/tests_ref/test_list_deduplicate_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:44 in list_deduplicate\n==3829305==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 27,
    "total": 45,
    "passed_functional": 18,
    "total_functional": 26
}
