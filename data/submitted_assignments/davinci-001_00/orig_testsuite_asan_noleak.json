{
    "results": {
        "test_list_init": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[  FAILED  ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head\n[   LINE   ] --- tests_orig/test_list_init.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_init\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[       OK ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[  FAILED  ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"\\xb0\\x96\\xbdn\\xfc\u007f\" != \"1 * item1 @ $1.00 ea\"\n[   LINE   ] --- tests_orig/test_list_item_to_string.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_item_to_string\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n",
            "stderr": "=================================================================\n==3053479==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60b000000414 at pc 0x7f2abac1d1c5 bp 0x7ffe0a099340 sp 0x7ffe0a098ae8\nWRITE of size 2 at 0x60b000000414 thread T0\n    #0 0x7f2abac1d1c4 in __interceptor_strcat ../../../../src/libsanitizer/asan/asan_interceptors.cc:384\n    #1 0x5580e8efca8e in list_print parts/gen_list_print.c:64\n    #2 0x5580e8f08c11 in test_list_print tests_orig/test_list_print.c:27\n    #3 0x5580e8f06e14 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5580e8f07349 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5580e8f07d8d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5580e8f08e6e in main tests_orig/test_list_print.c:40\n    #7 0x7f2aba9a1082 in __libc_start_main ../csu/libc-start.c:308\n    #8 0x5580e8efc82d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_00/tests_orig/test_list_print.bin+0x682d)\n\n0x60b000000414 is located 0 bytes to the right of 100-byte region [0x60b0000003b0,0x60b000000414)\nallocated by thread T0 here:\n    #0 0x7f2abac7c808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x5580e8efca46 in list_print parts/gen_list_print.c:59\n    #2 0x5580e8f08c11 in test_list_print tests_orig/test_list_print.c:27\n    #3 0x5580e8f06e14 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5580e8f07349 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5580e8f07d8d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5580e8f08e6e in main tests_orig/test_list_print.c:40\n    #7 0x7f2aba9a1082 in __libc_start_main ../csu/libc-start.c:308\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/asan/asan_interceptors.cc:384 in __interceptor_strcat\nShadow bytes around the buggy address:\n  0x0c167fff8030: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c167fff8040: 04 fa fa fa fa fa fa fa fa fa 00 00 00 00 00 00\n  0x0c167fff8050: 00 00 00 00 00 00 04 fa fa fa fa fa fa fa fa fa\n  0x0c167fff8060: 00 00 00 00 00 00 00 00 00 00 00 00 04 fa fa fa\n  0x0c167fff8070: fa fa fa fa fa fa 00 00 00 00 00 00 00 00 00 00\n=>0x0c167fff8080: 00 00[04]fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff80a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff80b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff80c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff80d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3053479==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "=================================================================\n==3054157==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000035 at pc 0x7ff85376a16d bp 0x7ffc6b3988d0 sp 0x7ffc6b398078\nWRITE of size 6 at 0x602000000035 thread T0\n    #0 0x7ff85376a16c in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:431\n    #1 0x55cbec697990 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:34\n    #2 0x55cbec6a396a in test_list_update_item_at_pos tests_orig/test_list_update_item_at_pos.c:25\n    #3 0x55cbec6a1c08 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55cbec6a213d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55cbec6a2b81 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55cbec6a3ce0 in main tests_orig/test_list_update_item_at_pos.c:35\n    #7 0x7ff853500082 in __libc_start_main ../csu/libc-start.c:308\n    #8 0x55cbec69782d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_00/tests_orig/test_list_update_item_at_pos.bin+0x682d)\n\n0x602000000035 is located 0 bytes to the right of 5-byte region [0x602000000030,0x602000000035)\nallocated by thread T0 here:\n    #0 0x7ff8537db808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55cbec697970 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:33\n    #2 0x55cbec6a396a in test_list_update_item_at_pos tests_orig/test_list_update_item_at_pos.c:25\n    #3 0x55cbec6a1c08 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55cbec6a213d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55cbec6a2b81 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55cbec6a3ce0 in main tests_orig/test_list_update_item_at_pos.c:35\n    #7 0x7ff853500082 in __libc_start_main ../csu/libc-start.c:308\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/asan/asan_interceptors.cc:431 in __interceptor_strcpy\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa 06 fa fa fa[05]fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3054157==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[  FAILED  ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head\n[   LINE   ] --- tests_orig/test_list_remove_item_at_pos.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item2\" != \"item1\"\n[   LINE   ] --- tests_orig/test_list_swap_item_positions.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[  FAILED  ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x2 != 0x3\n[   LINE   ] --- tests_orig/test_list_find_highest_price_item_position.c:28: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[  FAILED  ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 15.000000 != 16.000000\n[   LINE   ] --- tests_orig/test_list_cost_sum.c:28: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[  FAILED  ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item2,1.00,10\n\" != \"item1,1.00,1\n\"\n[   LINE   ] --- tests_orig/test_list_save.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "=================================================================\n==3054469==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000001c at pc 0x7f903fec216d bp 0x7fffaea09180 sp 0x7fffaea08928\nWRITE of size 14 at 0x60200000001c thread T0\n    #0 0x7f903fec216c in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:431\n    #1 0x562972995b14 in list_load parts/gen_list_load.c:64\n    #2 0x60b0000000f4  (<unknown module>)\n\n0x60200000001c is located 0 bytes to the right of 12-byte region [0x602000000010,0x60200000001c)\nallocated by thread T0 here:\n    #0 0x7f903ff33808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x562972995abe in list_load parts/gen_list_load.c:59\n    #2 0x60b0000000f4  (<unknown module>)\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/asan/asan_interceptors.cc:431 in __interceptor_strcpy\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa 00[04]fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3054469==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0xb\n[   LINE   ] --- tests_orig/test_list_deduplicate.c:28: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        }
    },
    "passed": 1,
    "total": 12,
    "passed_functional": 1,
    "total_functional": 12
}
