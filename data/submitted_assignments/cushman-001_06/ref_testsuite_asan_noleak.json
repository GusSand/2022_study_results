{
    "results": {
        "test_list_init": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[       OK ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_init_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3035596==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55e2e79898d9 bp 0x7ffd604ebe70 sp 0x7ffd604ebe70 T0)\n==3035596==The signal is caused by a WRITE memory access.\n==3035596==Hint: address points to the zero page.\n    #0 0x55e2e79898d8 in list_init parts/gen_list_init.c:25\n    #1 0x55e2e799574f in test_list_init_nullhead tests_ref/test_list_init_nullhead.c:23\n    #2 0x55e2e7993b26 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55e2e799405b in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55e2e7994a9f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55e2e7995916 in main tests_ref/test_list_init_nullhead.c:30\n    #6 0x7f81a294d082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55e2e798980d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_init_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_init.c:25 in list_init\n==3035596==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[       OK ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3035947==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5637f3a9d972 bp 0x7ffc646261f0 sp 0x7ffc646261b0 T0)\n==3035947==The signal is caused by a READ memory access.\n==3035947==Hint: address points to the zero page.\n    #0 0x5637f3a9d971 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:47\n    #1 0x5637f3aa98c8 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x5637f3aa7c86 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5637f3aa81bb in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5637f3aa8bff in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5637f3aa9a8f in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f121ca23082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x5637f3a9d82d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:47 in list_add_item_at_pos\n==3035947==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3036215==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f354b0c76e5 bp 0x7ffc542d5480 sp 0x7ffc542d4be8 T0)\n==3036215==The signal is caused by a READ memory access.\n==3036215==Hint: address points to the zero page.\n    #0 0x7f354b0c76e4  (/lib/x86_64-linux-gnu/libc.so.6+0x1886e4)\n    #1 0x7f354b1cccf5 in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:428\n    #2 0x55b5db7e9955 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:44\n    #3 0x55b5db7f5996 in test_list_add_item_at_pos_nullitem tests_ref/test_list_add_item_at_pos_nullitem.c:25\n    #4 0x55b5db7f3c86 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55b5db7f41bb in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55b5db7f4bff in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55b5db7f5baf in main tests_ref/test_list_add_item_at_pos_nullitem.c:32\n    #8 0x7f354af63082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x55b5db7e982d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_add_item_at_pos_nullitem.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libc.so.6+0x1886e4) \n==3036215==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3036588==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x560c6c84c9aa bp 0x7ffce7457c90 sp 0x7ffce7457c50 T0)\n==3036588==The signal is caused by a READ memory access.\n==3036588==Hint: address points to the zero page.\n    #0 0x560c6c84c9a9 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:56\n    #1 0x560c6c8589db in test_list_add_item_at_pos_oob tests_ref/test_list_add_item_at_pos_oob.c:26\n    #2 0x560c6c856c86 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x560c6c8571bb in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x560c6c857bff in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x560c6c858c7e in main tests_ref/test_list_add_item_at_pos_oob.c:35\n    #6 0x7fd9e2e3f082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x560c6c84c82d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_add_item_at_pos_oob.bin+0x682d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:56 in list_add_item_at_pos\n==3036588==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[  FAILED  ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_item_to_string_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_item_to_string_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3036895==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f32bf13cae7 bp 0x000000000031 sp 0x7fff901231d0 T0)\n==3036895==The signal is caused by a WRITE memory access.\n==3036895==Hint: address points to the zero page.\n    #0 0x7f32bf13cae6 in __GI__IO_str_overflow /build/glibc-SzIz7B/glibc-2.31/libio/strops.c:133\n    #1 0x7f32bf13b023 in __GI__IO_default_xsputn /build/glibc-SzIz7B/glibc-2.31/libio/genops.c:399\n    #2 0x7f32bf13b023 in __GI__IO_default_xsputn /build/glibc-SzIz7B/glibc-2.31/libio/genops.c:370\n    #3 0x7f32bf1207ac in __vfprintf_internal /build/glibc-SzIz7B/glibc-2.31/stdio-common/vfprintf-internal.c:1687\n    #4 0x7f32bf12e1b7 in __vsprintf_internal /build/glibc-SzIz7B/glibc-2.31/libio/iovsprintf.c:95\n    #5 0x7f32bf12e1b7 in __vsprintf /build/glibc-SzIz7B/glibc-2.31/libio/iovsprintf.c:104\n    #6 0x7f32bf339664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #7 0x7f32bf339bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #8 0x55811df15981 in list_item_to_string parts/gen_list_item_to_string.c:36\n    #9 0x55811df219af in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #10 0x55811df1fc4c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #11 0x55811df20181 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #12 0x55811df20bc5 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #13 0x55811df21bee in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #14 0x7f32bf0cd082 in __libc_start_main ../csu/libc-start.c:308\n    #15 0x55811df1582d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_item_to_string_nullstr.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV /build/glibc-SzIz7B/glibc-2.31/libio/strops.c:133 in __GI__IO_str_overflow\n==3036895==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3037271==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffeee605d84 at pc 0x7fd53bbcf725 bp 0x7ffeee605b20 sp 0x7ffeee6052b0\nWRITE of size 527 at 0x7ffeee605d84 thread T0\n    #0 0x7fd53bbcf724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7fd53bbcfbde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x564e8f2159a1 in list_item_to_string parts/gen_list_item_to_string.c:36\n    #3 0x564e8f221a8a in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x564e8f21fc6c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x564e8f2201a1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x564e8f220be5 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x564e8f221d58 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7fd53b963082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x564e8f21584d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_item_to_string_longstr.bin+0x584d)\n\nAddress 0x7ffeee605d84 is located in stack of thread T0 at offset 180 in frame\n    #0 0x564e8f22188b in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [48, 56) 'head' (line 27)\n    [80, 180) 'str' (line 23)\n    [224, 736) 'longstr' (line 24) <== Memory access at offset 180 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10005dcb8b60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005dcb8b70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005dcb8b80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005dcb8b90: 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00\n  0x10005dcb8ba0: 00 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x10005dcb8bb0:[04]f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00\n  0x10005dcb8bc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005dcb8bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005dcb8be0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005dcb8bf0: 00 00 00 00 00 00 f3 f3 f3 f3 f3 f3 f3 f3 00 00\n  0x10005dcb8c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3037271==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- ./test_common.h:55: error: No mock calls expected but called() was invoked in test_printf\n\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3037864==ERROR: AddressSanitizer: SEGV on unknown address 0x55d436bfb830 (pc 0x7fc18c599a16 bp 0x55d436bfb830 sp 0x7ffd2a1884c0 T0)\n==3037864==The signal is caused by a WRITE memory access.\n    #0 0x7fc18c599a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7fc18c599a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7fc18c599a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7fc18c599a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7fc18c67e3d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x55d436bf73dc in list_free test_common.h:35\n    #6 0x55d436bf7abb in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x55d436bf5bd5 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x55d436bf610a in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x55d436bf6b4e in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x55d436bf7cd4 in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7fc18c3a3082 in __libc_start_main ../csu/libc-start.c:308\n    #12 0x55d436beb80d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_update_item_at_pos.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3037864==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3038154==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5615bafcd8fe bp 0x7fff69cf2f20 sp 0x7fff69cf2f20 T0)\n==3038154==The signal is caused by a READ memory access.\n==3038154==Hint: address points to the zero page.\n    #0 0x5615bafcd8fd in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:32\n    #1 0x5615bafd9822 in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x5615bafd7bd5 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5615bafd810a in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5615bafd8b4e in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5615bafd99e9 in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7f9580f72082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x5615bafcd80d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:32 in list_update_item_at_pos\n==3038154==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[       OK ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3038502==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5585989a88f6 bp 0x7fff5fe91050 sp 0x7fff5fe91020 T0)\n==3038502==The signal is caused by a READ memory access.\n==3038502==Hint: address points to the zero page.\n    #0 0x5585989a88f5 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:32\n    #1 0x5585989b4819 in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x5585989b2beb in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5585989b3120 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5585989b3b64 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5585989b49e0 in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7f3645687082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x5585989a880d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:32 in list_remove_item_at_pos\n==3038502==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3038919==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x55c4fbff197e bp 0x7ffd473e08c0 sp 0x7ffd473e0890 T0)\n==3038919==The signal is caused by a READ memory access.\n==3038919==Hint: address points to the zero page.\n    #0 0x55c4fbff197d in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:51\n    #1 0x55c4fbffd957 in test_list_remove_item_at_pos_oob tests_ref/test_list_remove_item_at_pos_oob.c:27\n    #2 0x55c4fbffbbeb in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55c4fbffc120 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55c4fbffcb64 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55c4fbffdd60 in main tests_ref/test_list_remove_item_at_pos_oob.c:41\n    #6 0x7fd414f5b082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55c4fbff180d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_remove_item_at_pos_oob.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:51 in list_remove_item_at_pos\n==3038919==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1\" != \"item2\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n[  FAILED  ] test_list_swap_item_positions_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[  FAILED  ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[  FAILED  ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x3\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[  FAILED  ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position_nullpos.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position_nullpos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[  FAILED  ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0.000000 != 16.000000\n[   LINE   ] --- tests_ref/test_list_cost_sum.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[  FAILED  ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n[  FAILED  ] test_list_cost_sum_nulltotal\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nulltotal.c:28: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nulltotal\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[  FAILED  ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- fp\n[   LINE   ] --- tests_ref/test_list_save.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[  FAILED  ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_save_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[  FAILED  ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_save_nullfilename.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save_nullfilename\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[  FAILED  ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_save_badfile.c:31: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save_badfile\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3039431==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55cfeea92a97 bp 0x7ffc3c30c220 sp 0x7ffc3c30c180 T0)\n==3039431==The signal is caused by a READ memory access.\n==3039431==Hint: address points to the zero page.\n    #0 0x55cfeea92a96 in test_list_load tests_ref/test_list_load.c:36\n    #1 0x55cfeea90b1f in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x55cfeea91054 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x55cfeea91a98 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x55cfeea933e5 in main tests_ref/test_list_load.c:53\n    #5 0x7f70f2a9a082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x55cfeea8680d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_load.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_load.c:36 in test_list_load\n==3039431==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n[  FAILED  ] test_list_load_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[  FAILED  ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_nullfilename.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_nullfilename\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3039765==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5581bd6be981 bp 0x7ffe465b7a80 sp 0x7ffe465b77a0 T0)\n==3039765==The signal is caused by a READ memory access.\n==3039765==Hint: address points to the zero page.\n    #0 0x5581bd6be980 in test_list_load_longitem tests_ref/test_list_load_longitem.c:30\n    #1 0x5581bd6bcb3f in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x5581bd6bd074 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x5581bd6bdab8 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x5581bd6bed37 in main tests_ref/test_list_load_longitem.c:40\n    #5 0x7f154a613082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x5581bd6b282d in _start (/home/moyix/git/codex_study_grading/repos/cushman-001_06/tests_ref/test_list_load_longitem.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_load_longitem.c:30 in test_list_load_longitem\n==3039765==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n[  FAILED  ] test_list_load_badparse\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_badparse.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_badparse\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[  FAILED  ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_badfile.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_badfile\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[  FAILED  ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_missingfile.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_missingfile\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0xb\n[   LINE   ] --- tests_ref/test_list_deduplicate.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n[  FAILED  ] test_list_deduplicate_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_deduplicate_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 8,
    "total": 45,
    "passed_functional": 8,
    "total_functional": 26
}
