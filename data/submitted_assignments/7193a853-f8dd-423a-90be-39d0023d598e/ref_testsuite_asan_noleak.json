{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3819874==ERROR: AddressSanitizer: SEGV on unknown address 0x5635c6269710 (pc 0x7f6ce06c0a16 bp 0x5635c6269710 sp 0x7ffeb9ff9d70 T0)\n==3819874==The signal is caused by a WRITE memory access.\n    #0 0x7f6ce06c0a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f6ce06c0a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f6ce06c0a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f6ce06c0a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f6ce07a53d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x5635c6265413 in list_free test_common.h:35\n    #6 0x5635c6265d39 in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:34\n    #7 0x5635c6263c34 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x5635c6264174 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x5635c6264ba2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x5635c6265f3a in main tests_ref/test_list_add_item_at_pos.c:41\n    #11 0x7f6ce0499fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7f6ce049a07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x5635c6259804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_add_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3819874==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820098==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55c5165e28f3 bp 0x7ffdbb381ef0 sp 0x7ffdbb381eb0 T0)\n==3820098==The signal is caused by a READ memory access.\n==3820098==Hint: address points to the zero page.\n    #0 0x55c5165e28f2 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:37\n    #1 0x55c5165ee839 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x55c5165ecc34 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55c5165ed174 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55c5165edba2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55c5165ee9e8 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f093ea7cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f093ea7d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55c5165e2804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:37 in list_add_item_at_pos\n==3820098==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820306==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x557562049901 bp 0x7ffc1bc22fe0 sp 0x7ffc1bc22fd0 T0)\n==3820306==The signal is caused by a READ memory access.\n==3820306==Hint: address points to the zero page.\n    #0 0x557562049900 in list_item_to_string parts/gen_list_item_to_string.c:30\n    #1 0x55756205582c in test_list_item_to_string_nullhead tests_ref/test_list_item_to_string_nullhead.c:24\n    #2 0x557562053bb1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5575620540f1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x557562054b1f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x557562055a5b in main tests_ref/test_list_item_to_string_nullhead.c:31\n    #6 0x7fefd6c7efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fefd6c7f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x557562049824 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_item_to_string_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_item_to_string.c:30 in list_item_to_string\n==3820306==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820507==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f8013c43667 bp 0x000000000031 sp 0x7fff3e1bd3a0 T0)\n==3820507==The signal is caused by a WRITE memory access.\n==3820507==Hint: address points to the zero page.\n    #0 0x7f8013c43666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7f8013c41de3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7f8013c41de3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7f8013c29b23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7f8013c29b23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7f8013c35ae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7f8013c35ae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7f8013e7a664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7f8013e7abde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x561b5e01a92f in list_item_to_string parts/gen_list_item_to_string.c:30\n    #10 0x561b5e0268d7 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x561b5e024bb1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x561b5e0250f1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x561b5e025b1f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x561b5e026afe in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7f8013bddfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7f8013bde07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x561b5e01a824 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3820507==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3820860==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc87a30b24 at pc 0x7fdabdf5e725 bp 0x7ffc87a30930 sp 0x7ffc87a300c0\nWRITE of size 527 at 0x7ffc87a30b24 thread T0\n    #0 0x7fdabdf5e724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7fdabdf5ebde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x56063b7b394f in list_item_to_string parts/gen_list_item_to_string.c:30\n    #3 0x56063b7bf99e in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x56063b7bdbd1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x56063b7be111 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x56063b7beb3f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x56063b7bfc53 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7fdabdcc1fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7fdabdcc207c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x56063b7b3844 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffc87a30b24 is located in stack of thread T0 at offset 196 in frame\n    #0 0x56063b7bf7b3 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x100010f3e110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100010f3e120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100010f3e130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100010f3e140: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x100010f3e150: 00 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00\n=>0x100010f3e160: 00 00 00 00[04]f2 f2 f2 f2 f2 f2 f2 00 00 00 00\n  0x100010f3e170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100010f3e180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100010f3e190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100010f3e1a0: 00 00 00 00 00 00 00 00 00 00 00 00 f3 f3 f3 f3\n  0x100010f3e1b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3820860==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821229==ERROR: AddressSanitizer: SEGV on unknown address 0x558984b07750 (pc 0x7f6616a29a16 bp 0x558984b07750 sp 0x7ffde6fd5600 T0)\n==3821229==The signal is caused by a WRITE memory access.\n    #0 0x7f6616a29a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f6616a29a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f6616a29a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f6616a29a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f6616b0e3d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x558984b033bd in list_free test_common.h:35\n    #6 0x558984b03a85 in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x558984b01bde in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x558984b0211e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x558984b02b4c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x558984b03c86 in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7f6616802fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7f661680307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x558984af7804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_update_item_at_pos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3821229==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821432==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x560ac35de8f3 bp 0x7ffdc9035530 sp 0x7ffdc9035500 T0)\n==3821432==The signal is caused by a READ memory access.\n==3821432==Hint: address points to the zero page.\n    #0 0x560ac35de8f2 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:28\n    #1 0x560ac35ea7ee in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x560ac35e8bde in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x560ac35e911e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x560ac35e9b4c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x560ac35ea99d in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7fd66d7bafcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fd66d7bb07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x560ac35de804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:28 in list_update_item_at_pos\n==3821432==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[       OK ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821664==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55f1272a98e7 bp 0x7ffdaab7aec0 sp 0x7ffdaab7ae90 T0)\n==3821664==The signal is caused by a READ memory access.\n==3821664==Hint: address points to the zero page.\n    #0 0x55f1272a98e6 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:29\n    #1 0x55f1272b57e4 in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x55f1272b3bf3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55f1272b4133 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55f1272b4b61 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55f1272b5993 in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7fb68d9c6fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fb68d9c707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55f1272a9804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:29 in list_remove_item_at_pos\n==3821664==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[  FAILED  ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos_oob.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item2\" != \"item1\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821953==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55615346b8ea bp 0x7ffdaa1b9710 sp 0x7ffdaa1b96d0 T0)\n==3821953==The signal is caused by a READ memory access.\n==3821953==Hint: address points to the zero page.\n    #0 0x55615346b8e9 in list_swap_item_positions parts/gen_list_swap_item_positions.c:28\n    #1 0x556153477885 in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x556153475c8f in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5561534761cf in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x556153476bfd in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x556153477a34 in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7fedd371bfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fedd371c07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55615346b804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_swap_item_positions_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:28 in list_swap_item_positions\n==3821953==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[  FAILED  ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822162==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55f3819a493f bp 0x7fffa3630d40 sp 0x7fffa3630d40 T0)\n==3822162==The signal is caused by a WRITE memory access.\n==3822162==Hint: address points to the zero page.\n    #0 0x55f3819a493e in list_find_highest_price_item_position parts/gen_list_find_highest_price_item_position.c:43\n    #1 0x55f3819b08a7 in test_list_find_highest_price_item_position_nullpos tests_ref/test_list_find_highest_price_item_position_nullpos.c:25\n    #2 0x55f3819aebc2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55f3819af102 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55f3819afb30 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55f3819b0aa6 in main tests_ref/test_list_find_highest_price_item_position_nullpos.c:32\n    #6 0x7f3fb6232fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f3fb623307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55f3819a4804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_find_highest_price_item_position_nullpos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_find_highest_price_item_position.c:43 in list_find_highest_price_item_position\n==3822162==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[  FAILED  ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822422==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55cbec66b938 bp 0x7ffc594f9b20 sp 0x7ffc594f9b20 T0)\n==3822422==The signal is caused by a WRITE memory access.\n==3822422==Hint: address points to the zero page.\n    #0 0x55cbec66b937 in list_cost_sum parts/gen_list_cost_sum.c:41\n    #1 0x55cbec677965 in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x55cbec675bbd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55cbec6760fd in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55cbec676b2b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55cbec677b8c in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7f5392da6fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f5392da707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55cbec66b804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_cost_sum_nulltotal.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:41 in list_cost_sum\n==3822422==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[  FAILED  ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_save.c:32: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n[  FAILED  ] test_list_load\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_load.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n[       OK ] test_list_load_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n[  FAILED  ] test_list_load_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_load_longitem.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n[       OK ] test_list_load_badparse\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_deduplicate.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822703==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x558163e488d9 bp 0x7ffda8171500 sp 0x7ffda8171500 T0)\n==3822703==The signal is caused by a READ memory access.\n==3822703==Hint: address points to the zero page.\n    #0 0x558163e488d8 in list_deduplicate parts/gen_list_deduplicate.c:29\n    #1 0x558163e54762 in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x558163e52b76 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x558163e530b6 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x558163e53ae4 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x558163e54911 in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7f7cccda4fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f7cccda507c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x558163e48804 in _start (/home/gustavo/git/codex_study_grading/repos/7193a853-f8dd-423a-90be-39d0023d598e/tests_ref/test_list_deduplicate_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:29 in list_deduplicate\n==3822703==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[  FAILED  ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_deduplicate_single.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate_single\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[  FAILED  ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_deduplicate_nodups.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate_nodups\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        }
    },
    "passed": 14,
    "total": 45,
    "passed_functional": 10,
    "total_functional": 26
}
