{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_item_to_string": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_item_to_string_nullhead": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_item_to_string_nullstr": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_item_to_string_longstr": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n",
            "stderr": "=================================================================\n==3808437==ERROR: AddressSanitizer: global-buffer-overflow on address 0x557c4f8cde40 at pc 0x7fd8bd2d91c5 bp 0x7ffdb73466a0 sp 0x7ffdb7345e48\nWRITE of size 26 at 0x557c4f8cde40 thread T0\n    #0 0x7fd8bd2d91c4 in __interceptor_strcat ../../../../src/libsanitizer/asan/asan_interceptors.cc:384\n    #1 0x557c4f8c254f in test_printf test_common.h:57\n    #2 0x557c4f8b6912 in list_print parts/gen_list_print.c:40\n    #3 0x557c4f8c295f in test_list_print tests_ref/test_list_print.c:29\n    #4 0x557c4f8c0b9f in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x557c4f8c10df in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x557c4f8c1b0d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x557c4f8c2bcc in main tests_ref/test_list_print.c:43\n    #8 0x7fd8bd02cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7fd8bd02d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x557c4f8b6804 in _start (/home/gustavo/git/codex_study_grading/repos/a2ab1ed3-1881-42af-b18d-1197d0ea95ae/tests_ref/test_list_print.bin+0x6804)\n\n0x557c4f8cde40 is located 0 bytes to the right of global variable 'big_buffer' defined in './test_common.h:42:13' (0x557c4f8cda40) of size 1024\nSUMMARY: AddressSanitizer: global-buffer-overflow ../../../../src/libsanitizer/asan/asan_interceptors.cc:384 in __interceptor_strcat\nShadow bytes around the buggy address:\n  0x0ab009f11b70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab009f11b80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab009f11b90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab009f11ba0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab009f11bb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0ab009f11bc0: 00 00 00 00 00 00 00 00[f9]f9 f9 f9 00 00 00 00\n  0x0ab009f11bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab009f11be0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab009f11bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab009f11c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab009f11c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3808437==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n",
            "stderr": "=================================================================\n==3809221==ERROR: AddressSanitizer: global-buffer-overflow on address 0x55a3309cfd40 at pc 0x7f2bc20b31c5 bp 0x7ffcaf93e8d0 sp 0x7ffcaf93e078\nWRITE of size 256 at 0x55a3309cfd40 thread T0\n    #0 0x7f2bc20b31c4 in __interceptor_strcat ../../../../src/libsanitizer/asan/asan_interceptors.cc:384\n    #1 0x55a3309c456f in test_printf test_common.h:57\n    #2 0x55a3309b8932 in list_print parts/gen_list_print.c:40\n    #3 0x55a3309c498a in test_list_print_longitem tests_ref/test_list_print_longitem.c:30\n    #4 0x55a3309c2bbf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55a3309c30ff in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55a3309c3b2d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55a3309c4c2e in main tests_ref/test_list_print_longitem.c:39\n    #8 0x7f2bc1e06fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f2bc1e0707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55a3309b8824 in _start (/home/gustavo/git/codex_study_grading/repos/a2ab1ed3-1881-42af-b18d-1197d0ea95ae/tests_ref/test_list_print_longitem.bin+0x5824)\n\n0x55a3309cfd40 is located 0 bytes to the right of global variable 'big_buffer' defined in './test_common.h:42:13' (0x55a3309cf940) of size 1024\nSUMMARY: AddressSanitizer: global-buffer-overflow ../../../../src/libsanitizer/asan/asan_interceptors.cc:384 in __interceptor_strcat\nShadow bytes around the buggy address:\n  0x0ab4e6131f50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab4e6131f60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab4e6131f70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab4e6131f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab4e6131f90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0ab4e6131fa0: 00 00 00 00 00 00 00 00[f9]f9 f9 f9 00 00 00 00\n  0x0ab4e6131fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab4e6131fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab4e6131fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab4e6131fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0ab4e6131ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3809221==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": "skipped: compile_error",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_longitem": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badparse": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_missingfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_single": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nodups": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        }
    },
    "passed": 0,
    "total": 45,
    "passed_functional": 0,
    "total_functional": 26
}
