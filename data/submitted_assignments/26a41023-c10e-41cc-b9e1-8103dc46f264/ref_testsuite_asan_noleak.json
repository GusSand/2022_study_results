{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[  FAILED  ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3828563==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563256df493a bp 0x7ffdf95c3520 sp 0x7ffdf95c34e0 T0)\n==3828563==The signal is caused by a READ memory access.\n==3828563==Hint: address points to the zero page.\n    #0 0x563256df4939 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:48\n    #1 0x563256e0083b in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x563256dfec36 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x563256dff176 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x563256dffba4 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x563256e009ea in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f79a40cdfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f79a40ce07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x563256df4804 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:48 in list_add_item_at_pos\n==3828563==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3828740==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f6fd83f6667 bp 0x000000000031 sp 0x7fffb0febae0 T0)\n==3828740==The signal is caused by a WRITE memory access.\n==3828740==Hint: address points to the zero page.\n    #0 0x7f6fd83f6666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7f6fd83f4de3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7f6fd83f4de3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7f6fd83dcb23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7f6fd83dcb23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7f6fd83e8ae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7f6fd83e8ae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7f6fd862d664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7f6fd862dbde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x557ef645c93d in list_item_to_string parts/gen_list_item_to_string.c:35\n    #10 0x557ef64688e5 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x557ef6466bbf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x557ef64670ff in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x557ef6467b2d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x557ef6468b0c in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7f6fd8390fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7f6fd839107c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x557ef645c824 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3828740==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3828981==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe44434504 at pc 0x7f2e9eff2725 bp 0x7ffe44434310 sp 0x7ffe44433aa0\nWRITE of size 527 at 0x7ffe44434504 thread T0\n    #0 0x7f2e9eff2724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7f2e9eff2bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x55ffd84d495d in list_item_to_string parts/gen_list_item_to_string.c:35\n    #3 0x55ffd84e09ac in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x55ffd84debdf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55ffd84df11f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55ffd84dfb4d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55ffd84e0c61 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7f2e9ed55fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f2e9ed5607c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55ffd84d4844 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffe44434504 is located in stack of thread T0 at offset 196 in frame\n    #0 0x55ffd84e07c1 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10004887e850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004887e860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004887e870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004887e880: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 f2 f2 f2\n  0x10004887e890: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x10004887e8a0:[04]f2 f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00\n  0x10004887e8b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004887e8c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004887e8d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10004887e8e0: 00 00 00 00 00 00 00 00 f3 f3 f3 f3 00 00 00 00\n  0x10004887e8f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3828981==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3829232==ERROR: AddressSanitizer: SEGV on unknown address 0x55d78ff14750 (pc 0x7f6aaf229a16 bp 0x55d78ff14750 sp 0x7fff344c4d60 T0)\n==3829232==The signal is caused by a WRITE memory access.\n    #0 0x7f6aaf229a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f6aaf229a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f6aaf229a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f6aaf229a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f6aaf30e3d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x55d78ff103bd in list_free test_common.h:35\n    #6 0x55d78ff10a85 in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x55d78ff0ebde in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x55d78ff0f11e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x55d78ff0fb4c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x55d78ff10c86 in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7f6aaf002fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7f6aaf00307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x55d78ff04804 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_update_item_at_pos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3829232==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3829364==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x564733ff88e8 bp 0x7ffcd99ce730 sp 0x7ffcd99ce730 T0)\n==3829364==The signal is caused by a READ memory access.\n==3829364==Hint: address points to the zero page.\n    #0 0x564733ff88e7 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:27\n    #1 0x5647340047ee in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x564734002bde in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56473400311e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x564734003b4c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56473400499d in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7f513e1bafcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f513e1bb07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x564733ff8804 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:27 in list_update_item_at_pos\n==3829364==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[       OK ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[  FAILED  ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3829568==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55f39a0348e0 bp 0x7ffedb833f90 sp 0x7ffedb833f70 T0)\n==3829568==The signal is caused by a READ memory access.\n==3829568==Hint: address points to the zero page.\n    #0 0x55f39a0348df in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:30\n    #1 0x55f39a0407da in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x55f39a03ebe9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55f39a03f129 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55f39a03fb57 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55f39a040989 in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7f6eda559fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f6eda55a07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55f39a034804 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:30 in list_remove_item_at_pos\n==3829568==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[  FAILED  ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos_oob.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1\" != \"item2\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3829729==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55f8c1e888df bp 0x7fff29ba0b40 sp 0x7fff29ba0b40 T0)\n==3829729==The signal is caused by a READ memory access.\n==3829729==Hint: address points to the zero page.\n    #0 0x55f8c1e888de in list_swap_item_positions parts/gen_list_swap_item_positions.c:29\n    #1 0x55f8c1e9490b in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x55f8c1e92d15 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55f8c1e93255 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55f8c1e93c83 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55f8c1e94aba in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7f1dd056bfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f1dd056c07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55f8c1e88804 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_swap_item_positions_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:29 in list_swap_item_positions\n==3829729==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3829885==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x556a55f05a1a bp 0x7fffe07b9e80 sp 0x7fffe07b9e80 T0)\n==3829885==The signal is caused by a READ memory access.\n==3829885==Hint: address points to the zero page.\n    #0 0x556a55f05a19 in list_swap_item_positions parts/gen_list_swap_item_positions.c:61\n    #1 0x556a55f11a5d in test_list_swap_item_positions_oob tests_ref/test_list_swap_item_positions_oob.c:27\n    #2 0x556a55f0fd15 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x556a55f10255 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x556a55f10c83 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x556a55f11e65 in main tests_ref/test_list_swap_item_positions_oob.c:43\n    #6 0x7f49b5810fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f49b581107c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x556a55f05804 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_swap_item_positions_oob.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:61 in list_swap_item_positions\n==3829885==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[  FAILED  ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position_nullpos.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position_nullpos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[  FAILED  ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3830066==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55af2a3c98e1 bp 0x7ffcb9a07460 sp 0x7ffcb9a07460 T0)\n==3830066==The signal is caused by a WRITE memory access.\n==3830066==Hint: address points to the zero page.\n    #0 0x55af2a3c98e0 in list_cost_sum parts/gen_list_cost_sum.c:30\n    #1 0x55af2a3d5957 in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x55af2a3d3baf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55af2a3d40ef in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55af2a3d4b1d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55af2a3d5b7e in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7f1fef96dfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f1fef96e07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55af2a3c9804 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_cost_sum_nulltotal.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:30 in list_cost_sum\n==3830066==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[  FAILED  ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1,1.000000,1item2,1.000000,10item1.5,5.000000,1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" != \"item1,1.00,1\n\"\n[   LINE   ] --- tests_ref/test_list_save.c:40: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3830234==ERROR: AddressSanitizer: SEGV on unknown address 0x558bad98c6c0 (pc 0x7ff0d75a9301 bp 0x7ffe03b67f40 sp 0x7ffe03b67840 T0)\n==3830234==The signal is caused by a WRITE memory access.\n    #0 0x7ff0d75a9300 in __vfscanf_internal stdio-common/vfscanf-internal.c:1102\n    #1 0x7ff0d77dba34 in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7ff0d77dbb5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x558bad97ba33 in list_load parts/gen_list_load.c:57\n    #4 0x558bad987a1d in test_list_load tests_ref/test_list_load.c:27\n    #5 0x558bad985cc5 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x558bad986205 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x558bad986c33 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x558bad98852e in main tests_ref/test_list_load.c:53\n    #9 0x7ff0d756dfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7ff0d756e07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x558bad97b844 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_load.bin+0x6844)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdio-common/vfscanf-internal.c:1102 in __vfscanf_internal\n==3830234==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3830455==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5645429e5929 bp 0x7ffd45db53f0 sp 0x7ffd45db53c0 T0)\n==3830455==The signal is caused by a READ memory access.\n==3830455==Hint: address points to the zero page.\n    #0 0x5645429e5928 in list_add parts/gen_list_load.c:28\n    #1 0x5645429e5a0c in list_load parts/gen_list_load.c:58\n    #2 0x5645429f18c3 in test_list_load_nullhead tests_ref/test_list_load_nullhead.c:24\n    #3 0x5645429efcc5 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5645429f0205 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5645429f0c33 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5645429f1a72 in main tests_ref/test_list_load_nullhead.c:31\n    #7 0x7f33d97a8fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #8 0x7f33d97a907c in __libc_start_main_impl ../csu/libc-start.c:409\n    #9 0x5645429e5844 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_load_nullhead.bin+0x6844)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_load.c:28 in list_add\n==3830455==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3830595==ERROR: AddressSanitizer: SEGV on unknown address 0x56444a2eb6c0 (pc 0x7f02dd8cb301 bp 0x7ffe93c70d00 sp 0x7ffe93c70600 T0)\n==3830595==The signal is caused by a WRITE memory access.\n    #0 0x7f02dd8cb300 in __vfscanf_internal stdio-common/vfscanf-internal.c:1102\n    #1 0x7f02ddafda34 in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7f02ddafdb5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x56444a2dba53 in list_load parts/gen_list_load.c:57\n    #4 0x56444a2e7a83 in test_list_load_longitem tests_ref/test_list_load_longitem.c:29\n    #5 0x56444a2e5ce5 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x56444a2e6225 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x56444a2e6c53 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x56444a2e7e92 in main tests_ref/test_list_load_longitem.c:40\n    #9 0x7f02dd88ffcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f02dd89007c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x56444a2db864 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_load_longitem.bin+0x6864)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdio-common/vfscanf-internal.c:1102 in __vfscanf_internal\n==3830595==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3830828==ERROR: AddressSanitizer: SEGV on unknown address 0x560d559716c0 (pc 0x7f7cd13ea301 bp 0x7ffc95d2a840 sp 0x7ffc95d2a140 T0)\n==3830828==The signal is caused by a WRITE memory access.\n    #0 0x7f7cd13ea300 in __vfscanf_internal stdio-common/vfscanf-internal.c:1102\n    #1 0x7f7cd161ca34 in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7f7cd161cb5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x560d55961a33 in list_load parts/gen_list_load.c:57\n    #4 0x560d5596da1d in test_list_load_badparse tests_ref/test_list_load_badparse.c:27\n    #5 0x560d5596bcc5 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x560d5596c205 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x560d5596cc33 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x560d5596de14 in main tests_ref/test_list_load_badparse.c:39\n    #9 0x7f7cd13aefcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f7cd13af07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x560d55961844 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_load_badparse.bin+0x6844)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdio-common/vfscanf-internal.c:1102 in __vfscanf_internal\n==3830828==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0xb\n[   LINE   ] --- tests_ref/test_list_deduplicate.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3831011==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55dc002c68ff bp 0x7fff62b395c0 sp 0x7fff62b39580 T0)\n==3831011==The signal is caused by a READ memory access.\n==3831011==Hint: address points to the zero page.\n    #0 0x55dc002c68fe in list_deduplicate parts/gen_list_deduplicate.c:35\n    #1 0x55dc002d281f in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x55dc002d0c33 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55dc002d1173 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55dc002d1ba1 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55dc002d29ce in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7f482db2afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f482db2b07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55dc002c6804 in _start (/home/gustavo/git/codex_study_grading/repos/26a41023-c10e-41cc-b9e1-8103dc46f264/tests_ref/test_list_deduplicate_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:35 in list_deduplicate\n==3831011==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 15,
    "total": 45,
    "passed_functional": 11,
    "total_functional": 26
}
