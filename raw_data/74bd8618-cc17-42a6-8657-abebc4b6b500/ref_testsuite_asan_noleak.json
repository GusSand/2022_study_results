{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3817301==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5610d99389f6 bp 0x7ffebf2925d0 sp 0x7ffebf292540 T0)\n==3817301==The signal is caused by a READ memory access.\n==3817301==Hint: address points to the zero page.\n    #0 0x5610d99389f5 in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:29\n    #1 0x5610d9936bfe in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x5610d993713e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x5610d9937b6c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x5610d9938f04 in main tests_ref/test_list_add_item_at_pos.c:41\n    #5 0x7f904c22dfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #6 0x7f904c22e07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #7 0x5610d992c804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_add_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_add_item_at_pos.c:29 in test_list_add_item_at_pos\n==3817301==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3817548==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55dc9fdbd91d bp 0x7fff7da367c0 sp 0x7fff7da36780 T0)\n==3817548==The signal is caused by a READ memory access.\n==3817548==Hint: address points to the zero page.\n    #0 0x55dc9fdbd91c in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:48\n    #1 0x55dc9fdc9803 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x55dc9fdc7bfe in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55dc9fdc813e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55dc9fdc8b6c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55dc9fdc99b2 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f026c73ffcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f026c74007c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55dc9fdbd804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:48 in list_add_item_at_pos\n==3817548==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3817828==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f79fb596667 bp 0x000000000031 sp 0x7ffec524c8e0 T0)\n==3817828==The signal is caused by a WRITE memory access.\n==3817828==Hint: address points to the zero page.\n    #0 0x7f79fb596666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7f79fb594de3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7f79fb594de3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7f79fb57cb23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7f79fb57cb23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7f79fb588ae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7f79fb588ae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7f79fb7cd664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7f79fb7cdbde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x563f35d549b6 in list_item_to_string parts/gen_list_item_to_string.c:43\n    #10 0x563f35d60972 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x563f35d5ec4c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x563f35d5f18c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x563f35d5fbba in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x563f35d60b99 in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7f79fb530fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7f79fb53107c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x563f35d54844 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_item_to_string_nullstr.bin+0x6844)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3817828==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3818209==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc553f6514 at pc 0x7fb01d245725 bp 0x7ffc553f62a0 sp 0x7ffc553f5a30\nWRITE of size 116 at 0x7ffc553f6514 thread T0\n    #0 0x7fb01d245724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7fb01d245bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x556c3636d9d6 in list_item_to_string parts/gen_list_item_to_string.c:43\n    #3 0x556c36379a39 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x556c36377c6c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x556c363781ac in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x556c36378bda in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x556c36379cee in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7fb01cfa8fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7fb01cfa907c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x556c3636d864 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_item_to_string_longstr.bin+0x6864)\n\nAddress 0x7ffc553f6514 is located in stack of thread T0 at offset 196 in frame\n    #0 0x556c3637984e in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10000aa76c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000aa76c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000aa76c70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000aa76c80: 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 f2\n  0x10000aa76c90: f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00\n=>0x10000aa76ca0: 00 00[04]f2 f2 f2 f2 f2 f2 f2 00 00 00 00 00 00\n  0x10000aa76cb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000aa76cc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000aa76cd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000aa76ce0: 00 00 00 00 00 00 00 00 00 00 f3 f3 f3 f3 00 00\n  0x10000aa76cf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3818209==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[  FAILED  ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"\" != \"1: 3 * banana @ $1.00 ea\n2: 2 * orange @ $2.00 ea\n3: 4 * apple @ $3.00 ea\n\"\n[   LINE   ] --- tests_ref/test_list_print.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3818579==ERROR: AddressSanitizer: SEGV on unknown address 0x55866993f750 (pc 0x7f4b5b3cba16 bp 0x55866993f750 sp 0x7fff769a3d10 T0)\n==3818579==The signal is caused by a WRITE memory access.\n    #0 0x7f4b5b3cba15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f4b5b3cba15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f4b5b3cba15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f4b5b3cba15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f4b5b4b03d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x55866993b3a8 in list_free test_common.h:35\n    #6 0x55866993ba70 in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x558669939bc9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x55866993a109 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x55866993ab37 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x55866993bc71 in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7f4b5b1a4fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7f4b5b1a507c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x55866992f804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_update_item_at_pos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3818579==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3818805==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x56460aa6f8e8 bp 0x7ffc0fb0a1e0 sp 0x7ffc0fb0a1e0 T0)\n==3818805==The signal is caused by a READ memory access.\n==3818805==Hint: address points to the zero page.\n    #0 0x56460aa6f8e7 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:31\n    #1 0x56460aa7b7d9 in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x56460aa79bc9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56460aa7a109 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56460aa7ab37 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56460aa7b988 in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7f915815cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f915815d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x56460aa6f804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:31 in list_update_item_at_pos\n==3818805==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3819028==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x55fe2fb7692d bp 0x7ffc8faf50b0 sp 0x7ffc8faf5090 T0)\n==3819028==The signal is caused by a WRITE memory access.\n==3819028==Hint: address points to the zero page.\n    #0 0x55fe2fb7692c in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:41\n    #1 0x55fe2fb82955 in test_list_remove_item_at_pos tests_ref/test_list_remove_item_at_pos.c:29\n    #2 0x55fe2fb80bd2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55fe2fb81112 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55fe2fb81b40 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55fe2fb82d5b in main tests_ref/test_list_remove_item_at_pos.c:45\n    #6 0x7fceff783fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fceff78407c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55fe2fb76804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_remove_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:41 in list_remove_item_at_pos\n==3819028==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3819261==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x56030c5be8e0 bp 0x7ffeea76f450 sp 0x7ffeea76f430 T0)\n==3819261==The signal is caused by a READ memory access.\n==3819261==Hint: address points to the zero page.\n    #0 0x56030c5be8df in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:32\n    #1 0x56030c5ca7c3 in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x56030c5c8bd2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56030c5c9112 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56030c5c9b40 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56030c5ca972 in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7f5a8ce3efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f5a8ce3f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x56030c5be804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:32 in list_remove_item_at_pos\n==3819261==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3819469==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x55b32c5c192d bp 0x7fffdb180370 sp 0x7fffdb180350 T0)\n==3819469==The signal is caused by a WRITE memory access.\n==3819469==Hint: address points to the zero page.\n    #0 0x55b32c5c192c in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:41\n    #1 0x55b32c5cd8d5 in test_list_remove_item_at_pos_oob tests_ref/test_list_remove_item_at_pos_oob.c:26\n    #2 0x55b32c5cbbd2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55b32c5cc112 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55b32c5ccb40 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55b32c5cdcf0 in main tests_ref/test_list_remove_item_at_pos_oob.c:41\n    #6 0x7fdbcedb2fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fdbcedb307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55b32c5c1804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_remove_item_at_pos_oob.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:41 in list_remove_item_at_pos\n==3819469==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1\" != \"item2\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n",
            "stderr": "=================================================================\n==3819669==ERROR: AddressSanitizer: heap-use-after-free on address 0x603000000050 at pc 0x55c5ccfee3a6 bp 0x7fff2b813860 sp 0x7fff2b813850\nREAD of size 8 at 0x603000000050 thread T0\n    #0 0x55c5ccfee3a5 in list_free test_common.h:34\n    #1 0x55c5ccfeea68 in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:31\n    #2 0x55c5ccfecc0e in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55c5ccfed14e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55c5ccfedb7c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55c5ccfeec69 in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #6 0x7fda50496fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fda5049707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55c5ccfe2804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_swap_item_positions_samepos.bin+0x5804)\n\n0x603000000050 is located 16 bytes inside of 24-byte region [0x603000000040,0x603000000058)\nfreed by thread T0 here:\n    #0 0x7fda507a240f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x55c5ccfee400 in list_free test_common.h:36\n    #2 0x55c5ccfeea68 in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:31\n    #3 0x55c5ccfecc0e in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55c5ccfed14e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55c5ccfedb7c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55c5ccfeec69 in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #7 0x7fda50496fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\npreviously allocated by thread T0 here:\n    #0 0x7fda507a2808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55c5ccfe2e48 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/reflist.c:114\n    #2 0x55c5ccfee8e5 in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:25\n    #3 0x55c5ccfecc0e in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55c5ccfed14e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55c5ccfedb7c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55c5ccfeec69 in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #7 0x7fda50496fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-use-after-free test_common.h:34 in list_free\nShadow bytes around the buggy address:\n  0x0c067fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c067fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c067fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c067fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c067fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c067fff8000: fa fa 00 00 00 fa fa fa fd fd[fd]fa fa fa fd fd\n  0x0c067fff8010: fd fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c067fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3819669==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3819893==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55cb772f08df bp 0x7fff25978880 sp 0x7fff25978880 T0)\n==3819893==The signal is caused by a READ memory access.\n==3819893==Hint: address points to the zero page.\n    #0 0x55cb772f08de in list_swap_item_positions parts/gen_list_swap_item_positions.c:31\n    #1 0x55cb772fc804 in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x55cb772fac0e in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55cb772fb14e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55cb772fbb7c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55cb772fc9b3 in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7fa88fcc0fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fa88fcc107c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55cb772f0804 in _start (/home/gustavo/git/codex_study_grading/repos/74bd8618-cc17-42a6-8657-abebc4b6b500/tests_ref/test_list_swap_item_positions_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:31 in list_swap_item_positions\n==3819893==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[  FAILED  ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_longitem": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badparse": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_missingfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_single": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nodups": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        }
    },
    "passed": 2,
    "total": 45,
    "passed_functional": 1,
    "total_functional": 26
}
