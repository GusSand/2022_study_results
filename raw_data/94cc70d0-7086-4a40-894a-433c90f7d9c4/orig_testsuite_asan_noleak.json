{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[       OK ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n",
            "stderr": "=================================================================\n==3882490==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000074 at pc 0x7f3c58687a8d bp 0x7fff18a29e90 sp 0x7fff18a29620\nWRITE of size 22 at 0x602000000074 thread T0\n    #0 0x7f3c58687a8c in __interceptor_vsnprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1608\n    #1 0x7f3c58687f2e in __interceptor_snprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1679\n    #2 0x557ff416ba9c in ref_list_item_to_string /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:44\n    #3 0x557ff416b90a in list_print parts/gen_list_print.c:42\n    #4 0x557ff417798d in test_list_print tests_orig/test_list_print.c:27\n    #5 0x557ff4175bcd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x557ff417610d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x557ff4176b3b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x557ff4177bd2 in main tests_orig/test_list_print.c:40\n    #9 0x7f3c583e9fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f3c583ea07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x557ff416b804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_orig/test_list_print.bin+0x6804)\n\n0x602000000074 is located 0 bytes to the right of 4-byte region [0x602000000070,0x602000000074)\nallocated by thread T0 here:\n    #0 0x7f3c586f5808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x557ff416b8ea in list_print parts/gen_list_print.c:39\n    #2 0x557ff417798d in test_list_print tests_orig/test_list_print.c:27\n    #3 0x557ff4175bcd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x557ff417610d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x557ff4176b3b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x557ff4177bd2 in main tests_orig/test_list_print.c:40\n    #7 0x7f3c583e9fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1608 in __interceptor_vsnprintf\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa 07 fa fa fa 07 fa fa fa 06 fa fa fa[04]fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3882490==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n[       OK ] test_list_update_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[       OK ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n",
            "stderr": "=================================================================\n==3882586==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x7f2da72d33ad bp 0x7fffd7a60160 sp 0x7fffd7a5f908\nREAD of size 2 at 0x602000000010 thread T0\n    #0 0x7f2da72d33ac in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:443\n    #1 0x563b5b26d1cc in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:164\n    #2 0x563b5b26c9b2 in list_swap_item_positions parts/gen_list_swap_item_positions.c:49\n    #3 0x563b5b27898c in test_list_swap_item_positions tests_orig/test_list_swap_item_positions.c:25\n    #4 0x563b5b276c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x563b5b277184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x563b5b277bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x563b5b278c78 in main tests_orig/test_list_swap_item_positions.c:34\n    #8 0x7f2da703efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f2da703f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x563b5b26c804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_orig/test_list_swap_item_positions.bin+0x5804)\n\n0x602000000010 is located 0 bytes inside of 6-byte region [0x602000000010,0x602000000016)\nfreed by thread T0 here:\n    #0 0x7f2da734a40f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x563b5b26d1c0 in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:162\n    #2 0x563b5b26c987 in list_swap_item_positions parts/gen_list_swap_item_positions.c:46\n    #3 0x563b5b27898c in test_list_swap_item_positions tests_orig/test_list_swap_item_positions.c:25\n    #4 0x563b5b276c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x563b5b277184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x563b5b277bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x563b5b278c78 in main tests_orig/test_list_swap_item_positions.c:34\n    #8 0x7f2da703efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\npreviously allocated by thread T0 here:\n    #0 0x7f2da72d33ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x563b5b26ce9f in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:118\n    #2 0x563b5b27891b in test_list_swap_item_positions tests_orig/test_list_swap_item_positions.c:23\n    #3 0x563b5b276c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x563b5b277184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x563b5b277bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x563b5b278c78 in main tests_orig/test_list_swap_item_positions.c:34\n    #7 0x7f2da703efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-use-after-free ../../../../src/libsanitizer/asan/asan_interceptors.cc:443 in __interceptor_strdup\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa[fd]fa fa fa fd fa fa fa 06 fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3882586==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n[  FAILED  ] test_list_load\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"apple,0.80,2\" != \"apple\"\n[   LINE   ] --- tests_orig/test_list_load.c:28: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": "timeout",
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n",
            "stderr": "",
            "passed": false,
            "skipped": false
        }
    },
    "passed": 7,
    "total": 12,
    "passed_functional": 7,
    "total_functional": 12
}
