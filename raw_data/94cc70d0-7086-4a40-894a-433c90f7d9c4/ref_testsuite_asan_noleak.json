{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[  FAILED  ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head->next->next->next->next\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos.c:33: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3855697==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x56331bd4e91d bp 0x7ffc04d17d30 sp 0x7ffc04d17ce0 T0)\n==3855697==The signal is caused by a READ memory access.\n==3855697==Hint: address points to the zero page.\n    #0 0x56331bd4e91c in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:43\n    #1 0x56331bd5a828 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x56331bd58c23 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56331bd59163 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56331bd59b91 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56331bd5a9d7 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f1488227fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f148822807c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x56331bd4e804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:43 in list_add_item_at_pos\n==3855697==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3855767==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55b29448a901 bp 0x7ffd0883c9f0 sp 0x7ffd0883c9d0 T0)\n==3855767==The signal is caused by a READ memory access.\n==3855767==Hint: address points to the zero page.\n    #0 0x55b29448a900 in list_item_to_string parts/gen_list_item_to_string.c:29\n    #1 0x55b29449683c in test_list_item_to_string_nullhead tests_ref/test_list_item_to_string_nullhead.c:24\n    #2 0x55b294494bc1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55b294495101 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55b294495b2f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55b294496a6b in main tests_ref/test_list_item_to_string_nullhead.c:31\n    #6 0x7f57dd920fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f57dd92107c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55b29448a824 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_item_to_string_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_item_to_string.c:29 in list_item_to_string\n==3855767==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3855799==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f07d310c667 bp 0x000000000031 sp 0x7ffd085e5550 T0)\n==3855799==The signal is caused by a WRITE memory access.\n==3855799==Hint: address points to the zero page.\n    #0 0x7f07d310c666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7f07d310ade3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7f07d310ade3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7f07d30f2b23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7f07d30f2b23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7f07d30feae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7f07d30feae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7f07d3343664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7f07d3343bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x55c6ceff292f in list_item_to_string parts/gen_list_item_to_string.c:29\n    #10 0x55c6ceffe8e7 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x55c6ceffcbc1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x55c6ceffd101 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x55c6ceffdb2f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x55c6ceffeb0e in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7f07d30a6fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7f07d30a707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x55c6ceff2824 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3855799==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3855921==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffa314f5d4 at pc 0x7facee7a2725 bp 0x7fffa314f3d0 sp 0x7fffa314eb60\nWRITE of size 527 at 0x7fffa314f5d4 thread T0\n    #0 0x7facee7a2724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7facee7a2bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x55839e71794f in list_item_to_string parts/gen_list_item_to_string.c:29\n    #3 0x55839e7239ae in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x55839e721be1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55839e722121 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55839e722b4f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55839e723c63 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7facee505fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7facee50607c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55839e717844 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7fffa314f5d4 is located in stack of thread T0 at offset 196 in frame\n    #0 0x55839e7237c3 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x100074621e60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100074621e70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100074621e80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100074621e90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100074621ea0: 00 00 f1 f1 f1 f1 00 f2 f2 f2 f2 f2 f2 f2 00 00\n=>0x100074621eb0: 00 00 00 00 00 00 00 00 00 00[04]f2 f2 f2 f2 f2\n  0x100074621ec0: f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100074621ed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100074621ee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100074621ef0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100074621f00: 00 00 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3855921==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n",
            "stderr": "=================================================================\n==3855998==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000074 at pc 0x7f8e96a5aa8d bp 0x7fff93f2b320 sp 0x7fff93f2aab0\nWRITE of size 22 at 0x602000000074 thread T0\n    #0 0x7f8e96a5aa8c in __interceptor_vsnprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1608\n    #1 0x7f8e96a5af2e in __interceptor_snprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1679\n    #2 0x562340ca4a9c in ref_list_item_to_string /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:44\n    #3 0x562340ca490a in list_print parts/gen_list_print.c:42\n    #4 0x562340cb098d in test_list_print tests_ref/test_list_print.c:29\n    #5 0x562340caebcd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x562340caf10d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x562340cafb3b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x562340cb0bfa in main tests_ref/test_list_print.c:43\n    #9 0x7f8e967bcfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f8e967bd07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x562340ca4804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_print.bin+0x6804)\n\n0x602000000074 is located 0 bytes to the right of 4-byte region [0x602000000070,0x602000000074)\nallocated by thread T0 here:\n    #0 0x7f8e96ac8808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x562340ca48ea in list_print parts/gen_list_print.c:39\n    #2 0x562340cb098d in test_list_print tests_ref/test_list_print.c:29\n    #3 0x562340caebcd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x562340caf10d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x562340cafb3b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x562340cb0bfa in main tests_ref/test_list_print.c:43\n    #7 0x7f8e967bcfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1608 in __interceptor_vsnprintf\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa 07 fa fa fa 07 fa fa fa 06 fa fa fa[04]fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3855998==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n",
            "stderr": "=================================================================\n==3856113==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000014 at pc 0x7f8a1a2e8a8d bp 0x7ffcf64e22b0 sp 0x7ffcf64e1a40\nWRITE of size 100 at 0x602000000014 thread T0\n    #0 0x7f8a1a2e8a8c in __interceptor_vsnprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1608\n    #1 0x7f8a1a2e8f2e in __interceptor_snprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1679\n    #2 0x55fe6eed5abc in ref_list_item_to_string /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:44\n    #3 0x55fe6eed592a in list_print parts/gen_list_print.c:42\n    #4 0x55fe6eee19b8 in test_list_print_longitem tests_ref/test_list_print_longitem.c:30\n    #5 0x55fe6eedfbed in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x55fe6eee012d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x55fe6eee0b5b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x55fe6eee1c5c in main tests_ref/test_list_print_longitem.c:39\n    #9 0x7f8a1a04afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f8a1a04b07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x55fe6eed5824 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_print_longitem.bin+0x5824)\n\n0x602000000014 is located 0 bytes to the right of 4-byte region [0x602000000010,0x602000000014)\nallocated by thread T0 here:\n    #0 0x7f8a1a356808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55fe6eed590a in list_print parts/gen_list_print.c:39\n    #2 0x55fe6eee19b8 in test_list_print_longitem tests_ref/test_list_print_longitem.c:30\n    #3 0x55fe6eedfbed in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55fe6eee012d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55fe6eee0b5b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55fe6eee1c5c in main tests_ref/test_list_print_longitem.c:39\n    #7 0x7f8a1a04afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1608 in __interceptor_vsnprintf\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa[04]fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3856113==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856198==ERROR: AddressSanitizer: SEGV on unknown address 0x55a96fa8d750 (pc 0x7f8e9d1f0a16 bp 0x55a96fa8d750 sp 0x7ffd66d21400 T0)\n==3856198==The signal is caused by a WRITE memory access.\n    #0 0x7f8e9d1f0a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f8e9d1f0a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f8e9d1f0a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f8e9d1f0a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f8e9d2d53d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x55a96fa893a1 in list_free test_common.h:35\n    #6 0x55a96fa89a69 in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x55a96fa87bc2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x55a96fa88102 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x55a96fa88b30 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x55a96fa89c6a in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7f8e9cfc9fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7f8e9cfca07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x55a96fa7d804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_update_item_at_pos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3856198==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856259==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x560acd6478e8 bp 0x7ffdbea5dce0 sp 0x7ffdbea5dce0 T0)\n==3856259==The signal is caused by a READ memory access.\n==3856259==Hint: address points to the zero page.\n    #0 0x560acd6478e7 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:26\n    #1 0x560acd6537d2 in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x560acd651bc2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x560acd652102 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x560acd652b30 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x560acd653981 in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7fa0f0fb1fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fa0f0fb207c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x560acd647804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:26 in list_update_item_at_pos\n==3856259==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856336==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x55976a672aa1 bp 0x7ffdbd707290 sp 0x7ffdbd707200 T0)\n==3856336==The signal is caused by a READ memory access.\n==3856336==Hint: address points to the zero page.\n    #0 0x55976a672aa0 in test_list_remove_item_at_pos tests_ref/test_list_remove_item_at_pos.c:33\n    #1 0x55976a670bfd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x55976a67113d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x55976a671b6b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x55976a672d86 in main tests_ref/test_list_remove_item_at_pos.c:45\n    #5 0x7fbda46dbfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #6 0x7fbda46dc07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #7 0x55976a666804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_remove_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_remove_item_at_pos.c:33 in test_list_remove_item_at_pos\n==3856336==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856380==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55cf3f9da8e0 bp 0x7ffc254a57f0 sp 0x7ffc254a57b0 T0)\n==3856380==The signal is caused by a READ memory access.\n==3856380==Hint: address points to the zero page.\n    #0 0x55cf3f9da8df in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:27\n    #1 0x55cf3f9e67ee in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x55cf3f9e4bfd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55cf3f9e513d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55cf3f9e5b6b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55cf3f9e699d in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7fd014d9afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fd014d9b07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55cf3f9da804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:27 in list_remove_item_at_pos\n==3856380==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856444==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x55689e63a95c bp 0x7ffd83e2f9c0 sp 0x7ffd83e2f980 T0)\n==3856444==The signal is caused by a READ memory access.\n==3856444==Hint: address points to the zero page.\n    #0 0x55689e63a95b in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:42\n    #1 0x55689e646900 in test_list_remove_item_at_pos_oob tests_ref/test_list_remove_item_at_pos_oob.c:26\n    #2 0x55689e644bfd in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55689e64513d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55689e645b6b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55689e646d1b in main tests_ref/test_list_remove_item_at_pos_oob.c:41\n    #6 0x7fa2263cefcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fa2263cf07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55689e63a804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_remove_item_at_pos_oob.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:42 in list_remove_item_at_pos\n==3856444==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n",
            "stderr": "=================================================================\n==3856517==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x7f9757b9f3ad bp 0x7ffe5954e5a0 sp 0x7ffe5954dd48\nREAD of size 2 at 0x602000000010 thread T0\n    #0 0x7f9757b9f3ac in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:443\n    #1 0x562fd17fc1cc in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:164\n    #2 0x562fd17fb9b2 in list_swap_item_positions parts/gen_list_swap_item_positions.c:49\n    #3 0x562fd18079cc in test_list_swap_item_positions tests_ref/test_list_swap_item_positions.c:28\n    #4 0x562fd1805c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x562fd1806184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x562fd1806bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x562fd180811e in main tests_ref/test_list_swap_item_positions.c:47\n    #8 0x7f975790afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f975790b07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x562fd17fb804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_swap_item_positions.bin+0x6804)\n\n0x602000000010 is located 0 bytes inside of 6-byte region [0x602000000010,0x602000000016)\nfreed by thread T0 here:\n    #0 0x7f9757c1640f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x562fd17fc1c0 in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:162\n    #2 0x562fd17fb987 in list_swap_item_positions parts/gen_list_swap_item_positions.c:46\n    #3 0x562fd18079cc in test_list_swap_item_positions tests_ref/test_list_swap_item_positions.c:28\n    #4 0x562fd1805c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x562fd1806184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x562fd1806bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x562fd180811e in main tests_ref/test_list_swap_item_positions.c:47\n    #8 0x7f975790afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\npreviously allocated by thread T0 here:\n    #0 0x7f9757b9f3ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x562fd17fbe9f in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:118\n    #2 0x562fd180791b in test_list_swap_item_positions tests_ref/test_list_swap_item_positions.c:25\n    #3 0x562fd1805c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x562fd1806184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x562fd1806bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x562fd180811e in main tests_ref/test_list_swap_item_positions.c:47\n    #7 0x7f975790afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-use-after-free ../../../../src/libsanitizer/asan/asan_interceptors.cc:443 in __interceptor_strdup\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa[fd]fa fa fa fd fa fa fa 06 fa fa fa 06 fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3856517==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n",
            "stderr": "=================================================================\n==3856589==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x7f5313dbc3ad bp 0x7ffd7dc4d6f0 sp 0x7ffd7dc4ce98\nREAD of size 2 at 0x602000000010 thread T0\n    #0 0x7f5313dbc3ac in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:443\n    #1 0x5587a305b1cc in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:164\n    #2 0x5587a305a987 in list_swap_item_positions parts/gen_list_swap_item_positions.c:46\n    #3 0x5587a306698c in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:27\n    #4 0x5587a3064c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x5587a3065184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x5587a3065bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x5587a3066c9f in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #8 0x7f5313b27fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f5313b2807c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x5587a305a804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_swap_item_positions_samepos.bin+0x5804)\n\n0x602000000010 is located 0 bytes inside of 6-byte region [0x602000000010,0x602000000016)\nfreed by thread T0 here:\n    #0 0x7f5313e3340f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x5587a305b1c0 in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:162\n    #2 0x5587a305a987 in list_swap_item_positions parts/gen_list_swap_item_positions.c:46\n    #3 0x5587a306698c in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:27\n    #4 0x5587a3064c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x5587a3065184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x5587a3065bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x5587a3066c9f in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #8 0x7f5313b27fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\npreviously allocated by thread T0 here:\n    #0 0x7f5313dbc3ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x5587a305ae9f in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/reflist.c:118\n    #2 0x5587a306691b in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:25\n    #3 0x5587a3064c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5587a3065184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5587a3065bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5587a3066c9f in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #7 0x7f5313b27fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-use-after-free ../../../../src/libsanitizer/asan/asan_interceptors.cc:443 in __interceptor_strdup\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa[fd]fa fa fa 06 fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3856589==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856676==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55d4e7f538e3 bp 0x7ffdf9995aa0 sp 0x7ffdf9995a60 T0)\n==3856676==The signal is caused by a READ memory access.\n==3856676==Hint: address points to the zero page.\n    #0 0x55d4e7f538e2 in list_swap_item_positions parts/gen_list_swap_item_positions.c:26\n    #1 0x55d4e7f5f83a in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x55d4e7f5dc44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55d4e7f5e184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55d4e7f5ebb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55d4e7f5f9e9 in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7fc4692aefcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fc4692af07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55d4e7f53804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_swap_item_positions_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:26 in list_swap_item_positions\n==3856676==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856748==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55f1bc5c290f bp 0x7ffdc63b5f00 sp 0x7ffdc63b5ec0 T0)\n==3856748==The signal is caused by a READ memory access.\n==3856748==Hint: address points to the zero page.\n    #0 0x55f1bc5c290e in list_swap_item_positions parts/gen_list_swap_item_positions.c:33\n    #1 0x55f1bc5ce9ee in test_list_swap_item_positions_oob tests_ref/test_list_swap_item_positions_oob.c:29\n    #2 0x55f1bc5ccc44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55f1bc5cd184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55f1bc5cdbb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55f1bc5ced94 in main tests_ref/test_list_swap_item_positions_oob.c:43\n    #6 0x7ff4489f4fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7ff4489f507c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55f1bc5c2804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_swap_item_positions_oob.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:33 in list_swap_item_positions\n==3856748==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856794==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55ae6092c8e5 bp 0x7fffd22b1510 sp 0x7fffd22b1510 T0)\n==3856794==The signal is caused by a READ memory access.\n==3856794==Hint: address points to the zero page.\n    #0 0x55ae6092c8e4 in list_find_highest_price_item_position parts/gen_list_find_highest_price_item_position.c:28\n    #1 0x55ae60938857 in test_list_find_highest_price_item_position_nullhead tests_ref/test_list_find_highest_price_item_position_nullhead.c:24\n    #2 0x55ae60936bb2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55ae609370f2 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55ae60937b20 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55ae60938a56 in main tests_ref/test_list_find_highest_price_item_position_nullhead.c:31\n    #6 0x7f4a9c8b0fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f4a9c8b107c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55ae6092c804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_find_highest_price_item_position_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_find_highest_price_item_position.c:28 in list_find_highest_price_item_position\n==3856794==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856878==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55922b76b8e5 bp 0x7fff9d989650 sp 0x7fff9d989650 T0)\n==3856878==The signal is caused by a READ memory access.\n==3856878==Hint: address points to the zero page.\n    #0 0x55922b76b8e4 in list_find_highest_price_item_position parts/gen_list_find_highest_price_item_position.c:28\n    #1 0x55922b777897 in test_list_find_highest_price_item_position_nullpos tests_ref/test_list_find_highest_price_item_position_nullpos.c:25\n    #2 0x55922b775bb2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55922b7760f2 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55922b776b20 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55922b777a96 in main tests_ref/test_list_find_highest_price_item_position_nullpos.c:32\n    #6 0x7f1f7da3dfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f1f7da3e07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55922b76b804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_find_highest_price_item_position_nullpos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_find_highest_price_item_position.c:28 in list_find_highest_price_item_position\n==3856878==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[  FAILED  ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3856922==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55a8885678e7 bp 0x7ffcffb8e1b0 sp 0x7ffcffb8e1b0 T0)\n==3856922==The signal is caused by a READ memory access.\n==3856922==Hint: address points to the zero page.\n    #0 0x55a8885678e6 in list_cost_sum parts/gen_list_cost_sum.c:29\n    #1 0x55a88857394b in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x55a888571ba3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55a8885720e3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55a888572b11 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55a888573b72 in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7fcfe77b6fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fcfe77b707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55a888567804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_cost_sum_nulltotal.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:29 in list_cost_sum\n==3856922==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n[  FAILED  ] test_list_load\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"apple,0.80,2\" != \"item1\"\n[   LINE   ] --- tests_ref/test_list_load.c:33: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3857004==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55e4e3555918 bp 0x7ffef3c16520 sp 0x7ffef3c164e0 T0)\n==3857004==The signal is caused by a READ memory access.\n==3857004==Hint: address points to the zero page.\n    #0 0x55e4e3555917 in list_load parts/gen_list_load.c:32\n    #1 0x55e4e3561899 in test_list_load_nullhead tests_ref/test_list_load_nullhead.c:24\n    #2 0x55e4e355fc9b in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55e4e35601db in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55e4e3560c09 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55e4e3561a48 in main tests_ref/test_list_load_nullhead.c:31\n    #6 0x7f65242fbfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f65242fc07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55e4e3555824 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_load_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_load.c:32 in list_load\n==3857004==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3857043==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000000c0 (pc 0x7f0b247ea882 bp 0x7fff86a8d590 sp 0x7fff86a8ce90 T0)\n==3857043==The signal is caused by a READ memory access.\n==3857043==Hint: address points to the zero page.\n    #0 0x7f0b247ea881 in __vfscanf_internal stdio-common/vfscanf-internal.c:339\n    #1 0x7f0b24a1fa34 in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7f0b24a1fb5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x557db7bef9e4 in list_load parts/gen_list_load.c:47\n    #4 0x557db7bfb930 in test_list_load_nullfilename tests_ref/test_list_load_nullfilename.c:24\n    #5 0x557db7bf9c9b in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x557db7bfa1db in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x557db7bfac09 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x557db7bfbb2f in main tests_ref/test_list_load_nullfilename.c:31\n    #9 0x7f0b247b1fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f0b247b207c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x557db7bef824 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_load_nullfilename.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdio-common/vfscanf-internal.c:339 in __vfscanf_internal\n==3857043==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "=================================================================\n==3857143==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60b000000154 at pc 0x7f3c88f2f4fd bp 0x7ffef79e16e0 sp 0x7ffef79e0e68\nWRITE of size 518 at 0x60b000000154 thread T0\n    #0 0x7f3c88f2f4fc in scanf_common ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors_format.inc:341\n    #1 0x7f3c88f30a4f in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7f3c88f30b5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x561ccf918a04 in list_load parts/gen_list_load.c:47\n    #4 0x561ccf924a59 in test_list_load_longitem tests_ref/test_list_load_longitem.c:29\n    #5 0x561ccf922cbb in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x561ccf9231fb in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x561ccf923c29 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x561ccf924e68 in main tests_ref/test_list_load_longitem.c:40\n    #9 0x7f3c88cc2fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f3c88cc307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x561ccf918844 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_load_longitem.bin+0x5844)\n\n0x60b000000154 is located 0 bytes to the right of 100-byte region [0x60b0000000f0,0x60b000000154)\nallocated by thread T0 here:\n    #0 0x7f3c88fce808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x561ccf91894f in list_load parts/gen_list_load.c:35\n    #2 0x561ccf924a59 in test_list_load_longitem tests_ref/test_list_load_longitem.c:29\n    #3 0x561ccf922cbb in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x561ccf9231fb in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x561ccf923c29 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x561ccf924e68 in main tests_ref/test_list_load_longitem.c:40\n    #7 0x7f3c88cc2fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors_format.inc:341 in scanf_common\nShadow bytes around the buggy address:\n  0x0c167fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c167fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c167fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c167fff8000: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd\n  0x0c167fff8010: fd fd fd fd fd fa fa fa fa fa fa fa fa fa 00 00\n=>0x0c167fff8020: 00 00 00 00 00 00 00 00 00 00[04]fa fa fa fa fa\n  0x0c167fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3857143==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n[  FAILED  ] test_list_load_badparse\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_badparse.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_badparse\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3857243==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000000c0 (pc 0x7f9baa840882 bp 0x7ffd4b0a4510 sp 0x7ffd4b0a3e10 T0)\n==3857243==The signal is caused by a READ memory access.\n==3857243==Hint: address points to the zero page.\n    #0 0x7f9baa840881 in __vfscanf_internal stdio-common/vfscanf-internal.c:339\n    #1 0x7f9baaa75a34 in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7f9baaa75b5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x564f6798fa04 in list_load parts/gen_list_load.c:47\n    #4 0x564f6799ba4e in test_list_load_badfile tests_ref/test_list_load_badfile.c:30\n    #5 0x564f67999cbb in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x564f6799a1fb in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x564f6799ac29 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x564f6799bc55 in main tests_ref/test_list_load_badfile.c:37\n    #9 0x7f9baa807fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f9baa80807c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x564f6798f844 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_load_badfile.bin+0x5844)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdio-common/vfscanf-internal.c:339 in __vfscanf_internal\n==3857243==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3857340==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000000c0 (pc 0x7fe717e67882 bp 0x7fff78c6db60 sp 0x7fff78c6d460 T0)\n==3857340==The signal is caused by a READ memory access.\n==3857340==Hint: address points to the zero page.\n    #0 0x7fe717e67881 in __vfscanf_internal stdio-common/vfscanf-internal.c:339\n    #1 0x7fe71809ca34 in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7fe71809cb5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x559749cfc9e4 in list_load parts/gen_list_load.c:47\n    #4 0x559749d089b5 in test_list_load_missingfile tests_ref/test_list_load_missingfile.c:29\n    #5 0x559749d06c9b in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x559749d071db in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x559749d07c09 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x559749d08bb6 in main tests_ref/test_list_load_missingfile.c:36\n    #9 0x7fe717e2efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7fe717e2f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x559749cfc824 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_load_missingfile.bin+0x6824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdio-common/vfscanf-internal.c:339 in __vfscanf_internal\n==3857340==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": "timeout",
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n",
            "stderr": "",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3863166==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x557d5cc168d9 bp 0x7fffb8821490 sp 0x7fffb8821490 T0)\n==3863166==The signal is caused by a READ memory access.\n==3863166==Hint: address points to the zero page.\n    #0 0x557d5cc168d8 in list_deduplicate parts/gen_list_deduplicate.c:29\n    #1 0x557d5cc227b4 in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x557d5cc20bc8 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x557d5cc21108 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x557d5cc21b36 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x557d5cc22963 in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7fa1eb72dfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fa1eb72e07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x557d5cc16804 in _start (/home/gustavo/git/codex_study_grading/repos/94cc70d0-7086-4a40-894a-433c90f7d9c4/tests_ref/test_list_deduplicate_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:29 in list_deduplicate\n==3863166==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[  FAILED  ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_deduplicate_single.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate_single\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": "timeout",
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n",
            "stderr": "",
            "passed": false,
            "skipped": false
        }
    },
    "passed": 7,
    "total": 45,
    "passed_functional": 5,
    "total_functional": 26
}
