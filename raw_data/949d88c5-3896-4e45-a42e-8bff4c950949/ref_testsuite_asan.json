{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3810947==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5602f2a078f7 bp 0x7ffd8e800bf0 sp 0x7ffd8e800bf0 T0)\n==3810947==The signal is caused by a WRITE memory access.\n==3810947==Hint: address points to the zero page.\n    #0 0x5602f2a078f6 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:38\n    #1 0x5602f2a1386a in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:25\n    #2 0x5602f2a11b93 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5602f2a120d3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5602f2a12b01 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5602f2a13e99 in main tests_ref/test_list_add_item_at_pos.c:41\n    #6 0x7f7d01149fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f7d0114a07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x5602f2a07804 in _start (/home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/tests_ref/test_list_add_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:38 in list_add_item_at_pos\n==3810947==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3811260==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x560ac1fd98e8 bp 0x7ffd34028a20 sp 0x7ffd34028a20 T0)\n==3811260==The signal is caused by a READ memory access.\n==3811260==Hint: address points to the zero page.\n    #0 0x560ac1fd98e7 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:36\n    #1 0x560ac1fe5798 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x560ac1fe3b93 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x560ac1fe40d3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x560ac1fe4b01 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x560ac1fe5947 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f4ba807efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f4ba807f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x560ac1fd9804 in _start (/home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:36 in list_add_item_at_pos\n==3811260==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3811520==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5605324ac8f7 bp 0x7fffaa1c7a20 sp 0x7fffaa1c7a20 T0)\n==3811520==The signal is caused by a WRITE memory access.\n==3811520==Hint: address points to the zero page.\n    #0 0x5605324ac8f6 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:38\n    #1 0x5605324b8866 in test_list_add_item_at_pos_nullitem tests_ref/test_list_add_item_at_pos_nullitem.c:25\n    #2 0x5605324b6b93 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5605324b70d3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5605324b7b01 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5605324b8a67 in main tests_ref/test_list_add_item_at_pos_nullitem.c:32\n    #6 0x7f05ea05efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f05ea05f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x5605324ac804 in _start (/home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/tests_ref/test_list_add_item_at_pos_nullitem.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:38 in list_add_item_at_pos\n==3811520==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3811791==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x56282eec98f7 bp 0x7ffd2f72ae90 sp 0x7ffd2f72ae90 T0)\n==3811791==The signal is caused by a WRITE memory access.\n==3811791==Hint: address points to the zero page.\n    #0 0x56282eec98f6 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:38\n    #1 0x56282eed586a in test_list_add_item_at_pos_oob tests_ref/test_list_add_item_at_pos_oob.c:25\n    #2 0x56282eed3b93 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56282eed40d3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56282eed4b01 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56282eed5b36 in main tests_ref/test_list_add_item_at_pos_oob.c:35\n    #6 0x7f2ba115dfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f2ba115e07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x56282eec9804 in _start (/home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/tests_ref/test_list_add_item_at_pos_oob.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:38 in list_add_item_at_pos\n==3811791==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3812114==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x56087203e909 bp 0x7ffefb9d6c00 sp 0x7ffefb9d6be0 T0)\n==3812114==The signal is caused by a READ memory access.\n==3812114==Hint: address points to the zero page.\n    #0 0x56087203e908 in list_item_to_string parts/gen_list_item_to_string.c:30\n    #1 0x56087204a834 in test_list_item_to_string_nullhead tests_ref/test_list_item_to_string_nullhead.c:24\n    #2 0x560872048bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5608720490f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x560872049b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56087204aa63 in main tests_ref/test_list_item_to_string_nullhead.c:31\n    #6 0x7fc7c592bfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fc7c592c07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x56087203e824 in _start (/home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/tests_ref/test_list_item_to_string_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_item_to_string.c:30 in list_item_to_string\n==3812114==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3812396==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f69ab029667 bp 0x000000000031 sp 0x7fffea065dc0 T0)\n==3812396==The signal is caused by a WRITE memory access.\n==3812396==Hint: address points to the zero page.\n    #0 0x7f69ab029666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7f69ab027de3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7f69ab027de3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7f69ab00fb23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7f69ab00fb23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7f69ab01bae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7f69ab01bae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7f69ab260664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7f69ab260bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x5624f9d4c937 in list_item_to_string parts/gen_list_item_to_string.c:30\n    #10 0x5624f9d588df in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x5624f9d56bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x5624f9d570f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x5624f9d57b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x5624f9d58b06 in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7f69aafc3fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7f69aafc407c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x5624f9d4c824 in _start (/home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3812396==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3812795==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffccb45e1a4 at pc 0x7f94345a0725 bp 0x7ffccb45dfa0 sp 0x7ffccb45d730\nWRITE of size 527 at 0x7ffccb45e1a4 thread T0\n    #0 0x7f94345a0724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7f94345a0bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x55eca881b957 in list_item_to_string parts/gen_list_item_to_string.c:30\n    #3 0x55eca88279a6 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x55eca8825bd9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55eca8826119 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55eca8826b47 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55eca8827c5b in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7f9434303fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f943430407c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55eca881b844 in _start (/home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffccb45e1a4 is located in stack of thread T0 at offset 196 in frame\n    #0 0x55eca88277bb in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x100019683be0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100019683bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100019683c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100019683c10: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x100019683c20: 00 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00\n=>0x100019683c30: 00 00 00 00[04]f2 f2 f2 f2 f2 f2 f2 00 00 00 00\n  0x100019683c40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100019683c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100019683c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100019683c70: 00 00 00 00 00 00 00 00 00 00 00 00 f3 f3 f3 f3\n  0x100019683c80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3812795==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[  FAILED  ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"1: 3 * banana @ $1.00 ea2: 2 * orange @ $2.00 ea3: 4 * apple @ $3.00 ea\" != \"1: 3 * banana @ $1.00 ea\n2: 2 * orange @ $2.00 ea\n3: 4 * apple @ $3.00 ea\n\"\n[   LINE   ] --- tests_ref/test_list_print.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n\n=================================================================\n==3813244==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7eff0c03a808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x555f15a88ded in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/reflist.c:114\n    #2 0x555f15a9488a in test_list_print tests_ref/test_list_print.c:25\n    #3 0x555f15a92bb3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x555f15a930f3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x555f15a93b21 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x555f15a94be0 in main tests_ref/test_list_print.c:43\n    #7 0x7eff0bd2efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7eff0c03a808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x555f15a88ded in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/reflist.c:114\n    #2 0x555f15a948cb in test_list_print tests_ref/test_list_print.c:26\n    #3 0x555f15a92bb3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x555f15a930f3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x555f15a93b21 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x555f15a94be0 in main tests_ref/test_list_print.c:43\n    #7 0x7eff0bd2efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7eff0c03a808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x555f15a88ded in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/reflist.c:114\n    #2 0x555f15a9490c in test_list_print tests_ref/test_list_print.c:27\n    #3 0x555f15a92bb3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x555f15a930f3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x555f15a93b21 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x555f15a94be0 in main tests_ref/test_list_print.c:43\n    #7 0x7eff0bd2efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 7 byte(s) in 1 object(s) allocated from:\n    #0 0x7eff0bfc33ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x555f15a88e0e in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/reflist.c:118\n    #2 0x555f15a9488a in test_list_print tests_ref/test_list_print.c:25\n    #3 0x555f15a92bb3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x555f15a930f3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x555f15a93b21 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x555f15a94be0 in main tests_ref/test_list_print.c:43\n    #7 0x7eff0bd2efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 7 byte(s) in 1 object(s) allocated from:\n    #0 0x7eff0bfc33ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x555f15a88e0e in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/reflist.c:118\n    #2 0x555f15a948cb in test_list_print tests_ref/test_list_print.c:26\n    #3 0x555f15a92bb3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x555f15a930f3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x555f15a93b21 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x555f15a94be0 in main tests_ref/test_list_print.c:43\n    #7 0x7eff0bd2efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 6 byte(s) in 1 object(s) allocated from:\n    #0 0x7eff0bfc33ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x555f15a88e0e in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/reflist.c:118\n    #2 0x555f15a9490c in test_list_print tests_ref/test_list_print.c:27\n    #3 0x555f15a92bb3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x555f15a930f3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x555f15a93b21 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x555f15a94be0 in main tests_ref/test_list_print.c:43\n    #7 0x7eff0bd2efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: 92 byte(s) leaked in 6 allocation(s).\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n\n=================================================================\n==3813677==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7f98d78e3808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x5632434bee0d in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/reflist.c:114\n    #2 0x5632434ca931 in test_list_print_longitem tests_ref/test_list_print_longitem.c:28\n    #3 0x5632434c8bd3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5632434c9113 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5632434c9b41 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5632434cac42 in main tests_ref/test_list_print_longitem.c:39\n    #7 0x7f98d75d7fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 512 byte(s) in 1 object(s) allocated from:\n    #0 0x7f98d786c3ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x5632434bee2e in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/949d88c5-3896-4e45-a42e-8bff4c950949/reflist.c:118\n    #2 0x5632434ca931 in test_list_print_longitem tests_ref/test_list_print_longitem.c:28\n    #3 0x5632434c8bd3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5632434c9113 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5632434c9b41 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5632434cac42 in main tests_ref/test_list_print_longitem.c:39\n    #7 0x7f98d75d7fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: 536 byte(s) leaked in 2 allocation(s).\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_longitem": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badparse": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_missingfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_single": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nodups": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        }
    },
    "passed": 1,
    "total": 45,
    "passed_functional": 1,
    "total_functional": 26
}
