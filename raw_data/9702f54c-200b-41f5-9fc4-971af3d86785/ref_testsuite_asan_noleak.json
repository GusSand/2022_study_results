{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820345==ERROR: AddressSanitizer: SEGV on unknown address 0x55669b0f6710 (pc 0x7f7a5f024a16 bp 0x55669b0f6710 sp 0x7ffdbdbf6d00 T0)\n==3820345==The signal is caused by a WRITE memory access.\n    #0 0x7f7a5f024a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f7a5f024a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f7a5f024a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f7a5f024a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f7a5f1093d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x55669b0f1422 in list_free test_common.h:35\n    #6 0x55669b0f1d48 in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:34\n    #7 0x55669b0efc43 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x55669b0f0183 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x55669b0f0bb1 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x55669b0f1f49 in main tests_ref/test_list_add_item_at_pos.c:41\n    #11 0x7f7a5edfdfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7f7a5edfe07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x55669b0e5804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_add_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3820345==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820582==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55c3b49c58ec bp 0x7fffad001c40 sp 0x7fffad001c00 T0)\n==3820582==The signal is caused by a READ memory access.\n==3820582==Hint: address points to the zero page.\n    #0 0x55c3b49c58eb in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:43\n    #1 0x55c3b49d1848 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x55c3b49cfc43 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55c3b49d0183 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55c3b49d0bb1 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55c3b49d19f7 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f3fc2515fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f3fc251607c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55c3b49c5804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:43 in list_add_item_at_pos\n==3820582==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820829==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7ff724eb1667 bp 0x000000000031 sp 0x7ffe5428dad0 T0)\n==3820829==The signal is caused by a WRITE memory access.\n==3820829==Hint: address points to the zero page.\n    #0 0x7ff724eb1666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7ff724eafde3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7ff724eafde3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7ff724e97b23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7ff724e97b23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7ff724ea3ae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7ff724ea3ae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7ff7250e8664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7ff7250e8bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x55c04371693d in list_item_to_string parts/gen_list_item_to_string.c:39\n    #10 0x55c0437228f5 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x55c043720bcf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x55c04372110f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x55c043721b3d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x55c043722b1c in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7ff724e4bfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7ff724e4c07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x55c043716824 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3820829==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3821173==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcd500c544 at pc 0x7faad3c80725 bp 0x7ffcd500c340 sp 0x7ffcd500bad0\nWRITE of size 527 at 0x7ffcd500c544 thread T0\n    #0 0x7faad3c80724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7faad3c80bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x564a75c9795d in list_item_to_string parts/gen_list_item_to_string.c:39\n    #3 0x564a75ca39bc in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x564a75ca1bef in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x564a75ca212f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x564a75ca2b5d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x564a75ca3c71 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7faad39e3fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7faad39e407c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x564a75c97844 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffcd500c544 is located in stack of thread T0 at offset 196 in frame\n    #0 0x564a75ca37d1 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10001a9f9850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001a9f9860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001a9f9870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001a9f9880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001a9f9890: f1 f1 f1 f1 00 f2 f2 f2 f2 f2 f2 f2 00 00 00 00\n=>0x10001a9f98a0: 00 00 00 00 00 00 00 00[04]f2 f2 f2 f2 f2 f2 f2\n  0x10001a9f98b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001a9f98c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001a9f98d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001a9f98e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10001a9f98f0: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3821173==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[       OK ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[       OK ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821520==ERROR: AddressSanitizer: SEGV on unknown address 0x55680cfa0750 (pc 0x7fa78685ca16 bp 0x55680cfa0750 sp 0x7fff0255a880 T0)\n==3821520==The signal is caused by a WRITE memory access.\n    #0 0x7fa78685ca15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7fa78685ca15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7fa78685ca15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7fa78685ca15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7fa7869413d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x55680cf9c3a1 in list_free test_common.h:35\n    #6 0x55680cf9ca69 in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x55680cf9abc2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x55680cf9b102 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x55680cf9bb30 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x55680cf9cc6a in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7fa786635fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7fa78663607c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x55680cf90804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_update_item_at_pos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3821520==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821754==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55f6120268e8 bp 0x7ffe5c6c8470 sp 0x7ffe5c6c8470 T0)\n==3821754==The signal is caused by a READ memory access.\n==3821754==Hint: address points to the zero page.\n    #0 0x55f6120268e7 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:32\n    #1 0x55f6120327d2 in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x55f612030bc2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55f612031102 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55f612031b30 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55f612032981 in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7f5d739ebfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f5d739ec07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55f612026804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:32 in list_update_item_at_pos\n==3821754==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[       OK ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[       OK ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3821990==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55942b73e8e9 bp 0x7fffdb2ae5c0 sp 0x7fffdb2ae5c0 T0)\n==3821990==The signal is caused by a READ memory access.\n==3821990==Hint: address points to the zero page.\n    #0 0x55942b73e8e8 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:33\n    #1 0x55942b74a7ba in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x55942b748bc9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55942b749109 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55942b749b37 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55942b74a969 in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7fdfe4f64fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fdfe4f6507c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55942b73e804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:33 in list_remove_item_at_pos\n==3821990==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[  FAILED  ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos_oob.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n",
            "stderr": "=================================================================\n==3822205==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000030 at pc 0x7f83b57973ad bp 0x7ffebbaa9e20 sp 0x7ffebbaa95c8\nREAD of size 2 at 0x602000000030 thread T0\n    #0 0x7f83b57973ac in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:443\n    #1 0x55cf16cb91ed in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/reflist.c:164\n    #2 0x55cf16cb89c1 in list_swap_item_positions parts/gen_list_swap_item_positions.c:57\n    #3 0x55cf16cc49ed in test_list_swap_item_positions tests_ref/test_list_swap_item_positions.c:28\n    #4 0x55cf16cc2c65 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55cf16cc31a5 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55cf16cc3bd3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55cf16cc513f in main tests_ref/test_list_swap_item_positions.c:47\n    #8 0x7f83b5502fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f83b550307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55cf16cb8804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_swap_item_positions.bin+0x6804)\n\n0x602000000030 is located 0 bytes inside of 6-byte region [0x602000000030,0x602000000036)\nfreed by thread T0 here:\n    #0 0x7f83b580e40f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x55cf16cb91e1 in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/reflist.c:162\n    #2 0x55cf16cb89a6 in list_swap_item_positions parts/gen_list_swap_item_positions.c:56\n    #3 0x55cf16cc49ed in test_list_swap_item_positions tests_ref/test_list_swap_item_positions.c:28\n    #4 0x55cf16cc2c65 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55cf16cc31a5 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55cf16cc3bd3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55cf16cc513f in main tests_ref/test_list_swap_item_positions.c:47\n    #8 0x7f83b5502fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\npreviously allocated by thread T0 here:\n    #0 0x7f83b57973ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x55cf16cb8ec0 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/reflist.c:118\n    #2 0x55cf16cc497c in test_list_swap_item_positions tests_ref/test_list_swap_item_positions.c:26\n    #3 0x55cf16cc2c65 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55cf16cc31a5 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55cf16cc3bd3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55cf16cc513f in main tests_ref/test_list_swap_item_positions.c:47\n    #7 0x7f83b5502fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-use-after-free ../../../../src/libsanitizer/asan/asan_interceptors.cc:443 in __interceptor_strdup\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa fd fa fa fa[fd]fa fa fa 06 fa fa fa 06 fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3822205==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n",
            "stderr": "=================================================================\n==3822555==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x7f72f95d33ad bp 0x7ffec5738980 sp 0x7ffec5738128\nREAD of size 2 at 0x602000000010 thread T0\n    #0 0x7f72f95d33ac in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:443\n    #1 0x5625b20ac1ed in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/reflist.c:164\n    #2 0x5625b20ab9a6 in list_swap_item_positions parts/gen_list_swap_item_positions.c:56\n    #3 0x5625b20b79ad in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:27\n    #4 0x5625b20b5c65 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x5625b20b61a5 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x5625b20b6bd3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x5625b20b7cc0 in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #8 0x7f72f933efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f72f933f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x5625b20ab804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_swap_item_positions_samepos.bin+0x5804)\n\n0x602000000010 is located 0 bytes inside of 6-byte region [0x602000000010,0x602000000016)\nfreed by thread T0 here:\n    #0 0x7f72f964a40f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x5625b20ac1e1 in ref_list_update_item_at_pos /home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/reflist.c:162\n    #2 0x5625b20ab9a6 in list_swap_item_positions parts/gen_list_swap_item_positions.c:56\n    #3 0x5625b20b79ad in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:27\n    #4 0x5625b20b5c65 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x5625b20b61a5 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x5625b20b6bd3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x5625b20b7cc0 in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #8 0x7f72f933efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\npreviously allocated by thread T0 here:\n    #0 0x7f72f95d33ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x5625b20abec0 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/reflist.c:118\n    #2 0x5625b20b793c in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:25\n    #3 0x5625b20b5c65 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5625b20b61a5 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5625b20b6bd3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5625b20b7cc0 in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #7 0x7f72f933efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-use-after-free ../../../../src/libsanitizer/asan/asan_interceptors.cc:443 in __interceptor_strdup\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa[fd]fa fa fa 06 fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3822555==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822932==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55dabbb068e3 bp 0x7ffc5156b330 sp 0x7ffc5156b2d0 T0)\n==3822932==The signal is caused by a READ memory access.\n==3822932==Hint: address points to the zero page.\n    #0 0x55dabbb068e2 in list_swap_item_positions parts/gen_list_swap_item_positions.c:28\n    #1 0x55dabbb1285b in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x55dabbb10c65 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55dabbb111a5 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55dabbb11bd3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55dabbb12a0a in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7fd680bf8fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fd680bf907c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55dabbb06804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_swap_item_positions_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:28 in list_swap_item_positions\n==3822932==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[       OK ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3823212==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55baa8d718dd bp 0x7fff688ce0a0 sp 0x7fff688ce0a0 T0)\n==3823212==The signal is caused by a READ memory access.\n==3823212==Hint: address points to the zero page.\n    #0 0x55baa8d718dc in list_find_highest_price_item_position parts/gen_list_find_highest_price_item_position.c:29\n    #1 0x55baa8d7d85f in test_list_find_highest_price_item_position_nullhead tests_ref/test_list_find_highest_price_item_position_nullhead.c:24\n    #2 0x55baa8d7bbba in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55baa8d7c0fa in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55baa8d7cb28 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55baa8d7da5e in main tests_ref/test_list_find_highest_price_item_position_nullhead.c:31\n    #6 0x7f7590e8efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f7590e8f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55baa8d71804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_find_highest_price_item_position_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_find_highest_price_item_position.c:29 in list_find_highest_price_item_position\n==3823212==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3823455==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x56326efcd8dd bp 0x7fff888f2c20 sp 0x7fff888f2c20 T0)\n==3823455==The signal is caused by a READ memory access.\n==3823455==Hint: address points to the zero page.\n    #0 0x56326efcd8dc in list_find_highest_price_item_position parts/gen_list_find_highest_price_item_position.c:29\n    #1 0x56326efd989f in test_list_find_highest_price_item_position_nullpos tests_ref/test_list_find_highest_price_item_position_nullpos.c:25\n    #2 0x56326efd7bba in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56326efd80fa in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56326efd8b28 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56326efd9a9e in main tests_ref/test_list_find_highest_price_item_position_nullpos.c:32\n    #6 0x7fb2ea609fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fb2ea60a07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x56326efcd804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_find_highest_price_item_position_nullpos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_find_highest_price_item_position.c:29 in list_find_highest_price_item_position\n==3823455==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[  FAILED  ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3823707==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x556492a868e1 bp 0x7ffc8f422640 sp 0x7ffc8f422640 T0)\n==3823707==The signal is caused by a WRITE memory access.\n==3823707==Hint: address points to the zero page.\n    #0 0x556492a868e0 in list_cost_sum parts/gen_list_cost_sum.c:29\n    #1 0x556492a92957 in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x556492a90baf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x556492a910ef in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x556492a91b1d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x556492a92b7e in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7f5e2172afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f5e2172b07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x556492a86804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_cost_sum_nulltotal.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:29 in list_cost_sum\n==3823707==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n",
            "stderr": "=================================================================\n==3823954==AddressSanitizer CHECK failed: ../../../../src/libsanitizer/asan/asan_thread.cc:348 \"((ptr[0] == kCurrentStackFrameMagic)) != (0)\" (0x0, 0x0)\nAddressSanitizer:DEADLYSIGNAL\nAddressSanitizer: nested bug in the same thread, aborting.\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n[  FAILED  ] test_list_load\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"apple\" != \"item1\"\n[   LINE   ] --- tests_ref/test_list_load.c:33: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3824010==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55b753c3fa8c bp 0x7fff573b4cd0 sp 0x7fff573b4b80 T0)\n==3824010==The signal is caused by a WRITE memory access.\n==3824010==Hint: address points to the zero page.\n    #0 0x55b753c3fa8b in list_load parts/gen_list_load.c:64\n    #1 0x55b753c4b982 in test_list_load_nullhead tests_ref/test_list_load_nullhead.c:24\n    #2 0x55b753c49d84 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55b753c4a2c4 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55b753c4acf2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55b753c4bb31 in main tests_ref/test_list_load_nullhead.c:31\n    #6 0x7f3b08245fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f3b0824607c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55b753c3f884 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_load_nullhead.bin+0x6884)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_load.c:64 in list_load\n==3824010==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3824237==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f7d9e8ef633 bp 0x7ffffc81dbd0 sp 0x7ffffc81d600 T0)\n==3824237==The signal is caused by a READ memory access.\n==3824237==Hint: address points to the zero page.\n    #0 0x7f7d9e8ef632 in __GI_____strtod_l_internal stdlib/strtod_l.c:611\n    #1 0x5615a2178a42 in list_load parts/gen_list_load.c:58\n    #2 0x5615a2184b42 in test_list_load_longitem tests_ref/test_list_load_longitem.c:29\n    #3 0x5615a2182da4 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5615a21832e4 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5615a2183d12 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5615a2184f51 in main tests_ref/test_list_load_longitem.c:40\n    #7 0x7f7d9e8cdfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #8 0x7f7d9e8ce07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #9 0x5615a21788a4 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_load_longitem.bin+0x68a4)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdlib/strtod_l.c:611 in __GI_____strtod_l_internal\n==3824237==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3824484==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f522bba7633 bp 0x7ffe071bd080 sp 0x7ffe071bcab0 T0)\n==3824484==The signal is caused by a READ memory access.\n==3824484==Hint: address points to the zero page.\n    #0 0x7f522bba7632 in __GI_____strtod_l_internal stdlib/strtod_l.c:611\n    #1 0x556b567ada22 in list_load parts/gen_list_load.c:58\n    #2 0x556b567b9adc in test_list_load_badparse tests_ref/test_list_load_badparse.c:27\n    #3 0x556b567b7d84 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x556b567b82c4 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x556b567b8cf2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x556b567b9ed3 in main tests_ref/test_list_load_badparse.c:39\n    #7 0x7f522bb85fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #8 0x7f522bb8607c in __libc_start_main_impl ../csu/libc-start.c:409\n    #9 0x556b567ad884 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_load_badparse.bin+0x6884)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdlib/strtod_l.c:611 in __GI_____strtod_l_internal\n==3824484==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0xb\n[   LINE   ] --- tests_ref/test_list_deduplicate.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3824738==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55f4d8103908 bp 0x7ffd8b599780 sp 0x7ffd8b5996c0 T0)\n==3824738==The signal is caused by a READ memory access.\n==3824738==Hint: address points to the zero page.\n    #0 0x55f4d8103907 in list_deduplicate parts/gen_list_deduplicate.c:32\n    #1 0x55f4d810fbfa in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x55f4d810e00e in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55f4d810e54e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55f4d810ef7c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55f4d810fda9 in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7fdf513a9fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fdf513aa07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55f4d8103804 in _start (/home/gustavo/git/codex_study_grading/repos/9702f54c-200b-41f5-9fc4-971af3d86785/tests_ref/test_list_deduplicate_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:32 in list_deduplicate\n==3824738==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 18,
    "total": 45,
    "passed_functional": 13,
    "total_functional": 26
}
