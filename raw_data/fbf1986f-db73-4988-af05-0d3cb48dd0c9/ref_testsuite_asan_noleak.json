{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3812849==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fb05c529e2f bp 0x7ffc6fb0e330 sp 0x7ffc6fb0daa0 T0)\n==3812849==The signal is caused by a READ memory access.\n==3812849==Hint: address points to the zero page.\n    #0 0x7fb05c529e2e in AddressIsPoisoned ../../../../src/libsanitizer/asan/asan_mapping.h:396\n    #1 0x7fb05c529e2e in QuickCheckForUnpoisonedRegion ../../../../src/libsanitizer/asan/asan_interceptors_memintrinsics.h:30\n    #2 0x7fb05c529e2e in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:431\n    #3 0x55b59d15393a in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:38\n    #4 0x55b59d15f92b in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:25\n    #5 0x55b59d15dc54 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x55b59d15e194 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x55b59d15ebc2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x55b59d15ff5a in main tests_ref/test_list_add_item_at_pos.c:41\n    #9 0x7fb05c28ffcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7fb05c29007c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x55b59d153824 in _start (/home/gustavo/git/codex_study_grading/repos/fbf1986f-db73-4988-af05-0d3cb48dd0c9/tests_ref/test_list_add_item_at_pos.bin+0x6824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/asan/asan_mapping.h:396 in AddressIsPoisoned\n==3812849==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3813246==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f45deb23e2f bp 0x7ffda2565850 sp 0x7ffda2564fc0 T0)\n==3813246==The signal is caused by a READ memory access.\n==3813246==Hint: address points to the zero page.\n    #0 0x7f45deb23e2e in AddressIsPoisoned ../../../../src/libsanitizer/asan/asan_mapping.h:396\n    #1 0x7f45deb23e2e in QuickCheckForUnpoisonedRegion ../../../../src/libsanitizer/asan/asan_interceptors_memintrinsics.h:30\n    #2 0x7f45deb23e2e in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:431\n    #3 0x55d02980c93a in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:38\n    #4 0x55d029818859 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #5 0x55d029816c54 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x55d029817194 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x55d029817bc2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x55d029818a08 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #9 0x7f45de889fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f45de88a07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x55d02980c824 in _start (/home/gustavo/git/codex_study_grading/repos/fbf1986f-db73-4988-af05-0d3cb48dd0c9/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/asan/asan_mapping.h:396 in AddressIsPoisoned\n==3813246==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3813650==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fa20cbcf05d bp 0x7fffbc8e56d0 sp 0x7fffbc8e4e38 T0)\n==3813650==The signal is caused by a READ memory access.\n==3813650==Hint: address points to the zero page.\n    #0 0x7fa20cbcf05c  (/lib/x86_64-linux-gnu/libc.so.6+0x19c05c)\n    #1 0x7fa20ccf6cf5 in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:428\n    #2 0x5600f9ee393a in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:38\n    #3 0x5600f9eef927 in test_list_add_item_at_pos_nullitem tests_ref/test_list_add_item_at_pos_nullitem.c:25\n    #4 0x5600f9eedc54 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x5600f9eee194 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x5600f9eeebc2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x5600f9eefb28 in main tests_ref/test_list_add_item_at_pos_nullitem.c:32\n    #8 0x7fa20ca5cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7fa20ca5d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x5600f9ee3824 in _start (/home/gustavo/git/codex_study_grading/repos/fbf1986f-db73-4988-af05-0d3cb48dd0c9/tests_ref/test_list_add_item_at_pos_nullitem.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libc.so.6+0x19c05c) \n==3813650==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3814029==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f7332b03e2f bp 0x7ffe8dd52e20 sp 0x7ffe8dd52590 T0)\n==3814029==The signal is caused by a READ memory access.\n==3814029==Hint: address points to the zero page.\n    #0 0x7f7332b03e2e in AddressIsPoisoned ../../../../src/libsanitizer/asan/asan_mapping.h:396\n    #1 0x7f7332b03e2e in QuickCheckForUnpoisonedRegion ../../../../src/libsanitizer/asan/asan_interceptors_memintrinsics.h:30\n    #2 0x7f7332b03e2e in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:431\n    #3 0x562e0368093a in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:38\n    #4 0x562e0368c92b in test_list_add_item_at_pos_oob tests_ref/test_list_add_item_at_pos_oob.c:25\n    #5 0x562e0368ac54 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x562e0368b194 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x562e0368bbc2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x562e0368cbf7 in main tests_ref/test_list_add_item_at_pos_oob.c:35\n    #9 0x7f7332869fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f733286a07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x562e03680824 in _start (/home/gustavo/git/codex_study_grading/repos/fbf1986f-db73-4988-af05-0d3cb48dd0c9/tests_ref/test_list_add_item_at_pos_oob.bin+0x6824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/asan/asan_mapping.h:396 in AddressIsPoisoned\n==3814029==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[  FAILED  ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"1 * item1 @ $1.00 ea\n\" != \"1 * item1 @ $1.00 ea\"\n[   LINE   ] --- tests_ref/test_list_item_to_string.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_item_to_string\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3814411==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x562597dac901 bp 0x7ffcf558c5d0 sp 0x7ffcf558c5c0 T0)\n==3814411==The signal is caused by a READ memory access.\n==3814411==Hint: address points to the zero page.\n    #0 0x562597dac900 in list_item_to_string parts/gen_list_item_to_string.c:29\n    #1 0x562597db882c in test_list_item_to_string_nullhead tests_ref/test_list_item_to_string_nullhead.c:24\n    #2 0x562597db6bb1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x562597db70f1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x562597db7b1f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x562597db8a5b in main tests_ref/test_list_item_to_string_nullhead.c:31\n    #6 0x7fc513b77fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fc513b7807c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x562597dac824 in _start (/home/gustavo/git/codex_study_grading/repos/fbf1986f-db73-4988-af05-0d3cb48dd0c9/tests_ref/test_list_item_to_string_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_item_to_string.c:29 in list_item_to_string\n==3814411==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3814651==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fba24d81667 bp 0x000000000031 sp 0x7ffce326a9e0 T0)\n==3814651==The signal is caused by a WRITE memory access.\n==3814651==Hint: address points to the zero page.\n    #0 0x7fba24d81666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7fba24d7fde3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7fba24d7fde3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7fba24d67b23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7fba24d67b23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7fba24d73ae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7fba24d73ae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7fba24fb8664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7fba24fb8bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x55d3e528492f in list_item_to_string parts/gen_list_item_to_string.c:29\n    #10 0x55d3e52908d7 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x55d3e528ebb1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x55d3e528f0f1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x55d3e528fb1f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x55d3e5290afe in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7fba24d1bfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7fba24d1c07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x55d3e5284824 in _start (/home/gustavo/git/codex_study_grading/repos/fbf1986f-db73-4988-af05-0d3cb48dd0c9/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3814651==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3815049==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc35c57bf4 at pc 0x7f127e268725 bp 0x7ffc35c57a00 sp 0x7ffc35c57190\nWRITE of size 528 at 0x7ffc35c57bf4 thread T0\n    #0 0x7f127e268724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7f127e268bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x55f0af37b94f in list_item_to_string parts/gen_list_item_to_string.c:29\n    #3 0x55f0af38799e in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x55f0af385bd1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55f0af386111 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55f0af386b3f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55f0af387c53 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7f127dfcbfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f127dfcc07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55f0af37b844 in _start (/home/gustavo/git/codex_study_grading/repos/fbf1986f-db73-4988-af05-0d3cb48dd0c9/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffc35c57bf4 is located in stack of thread T0 at offset 196 in frame\n    #0 0x55f0af3877b3 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x100006b82f20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100006b82f30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100006b82f40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100006b82f50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100006b82f60: 00 00 00 00 00 00 f1 f1 f1 f1 00 f2 f2 f2 f2 f2\n=>0x100006b82f70: f2 f2 00 00 00 00 00 00 00 00 00 00 00 00[04]f2\n  0x100006b82f80: f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00\n  0x100006b82f90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100006b82fa0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100006b82fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100006b82fc0: 00 00 00 00 00 00 f3 f3 f3 f3 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3815049==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_longitem": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badparse": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_missingfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_single": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nodups": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        }
    },
    "passed": 1,
    "total": 45,
    "passed_functional": 1,
    "total_functional": 26
}
