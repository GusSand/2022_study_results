{
    "results": {
        "test_list_init": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[  FAILED  ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head\n[   LINE   ] --- tests_orig/test_list_init.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_init\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[  FAILED  ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_orig/test_list_add_item_at_pos.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n[       OK ] test_list_update_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3194218==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x55d6fd8d190b bp 0x7fff35841cb0 sp 0x7fff35841c80 T0)\n==3194218==The signal is caused by a READ memory access.\n==3194218==Hint: address points to the zero page.\n    #0 0x55d6fd8d190a in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:31\n    #1 0x55d6fd8dd8dc in test_list_remove_item_at_pos tests_orig/test_list_remove_item_at_pos.c:24\n    #2 0x55d6fd8dbb9b in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55d6fd8dc0d0 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55d6fd8dcb14 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55d6fd8ddb3e in main tests_orig/test_list_remove_item_at_pos.c:32\n    #6 0x7f2279a4d082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55d6fd8d180d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_07/tests_orig/test_list_remove_item_at_pos.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:31 in list_remove_item_at_pos\n==3194218==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3194365==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x5601b367893d bp 0x7ffe4eeb69a0 sp 0x7ffe4eeb69a0 T0)\n==3194365==The signal is caused by a READ memory access.\n==3194365==Hint: address points to the zero page.\n    #0 0x5601b367893c in list_swap_item_positions parts/gen_list_swap_item_positions.c:40\n    #1 0x5601b3684951 in test_list_swap_item_positions tests_orig/test_list_swap_item_positions.c:25\n    #2 0x5601b3682bca in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5601b36830ff in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5601b3683b43 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5601b3684c57 in main tests_orig/test_list_swap_item_positions.c:34\n    #6 0x7f22c9b17082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x5601b367880d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_07/tests_orig/test_list_swap_item_positions.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:40 in list_swap_item_positions\n==3194365==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3194843==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x56534377493d bp 0x7ffc9ea57960 sp 0x7ffc9ea57960 T0)\n==3194843==The signal is caused by a READ memory access.\n==3194843==Hint: address points to the zero page.\n    #0 0x56534377493c in list_find_highest_price_item_position parts/gen_list_find_highest_price_item_position.c:39\n    #1 0x5653437809d8 in test_list_find_highest_price_item_position tests_orig/test_list_find_highest_price_item_position.c:27\n    #2 0x56534377ebab in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56534377f0e0 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56534377fb24 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x565343780c57 in main tests_orig/test_list_find_highest_price_item_position.c:35\n    #6 0x7f56c4ffd082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x56534377480d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_07/tests_orig/test_list_find_highest_price_item_position.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_find_highest_price_item_position.c:39 in list_find_highest_price_item_position\n==3194843==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3195670==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x557d6365292a bp 0x7ffce6eb46d0 sp 0x7ffce6eb46d0 T0)\n==3195670==The signal is caused by a READ memory access.\n==3195670==Hint: address points to the zero page.\n    #0 0x557d63652929 in list_cost_sum parts/gen_list_cost_sum.c:32\n    #1 0x557d6365e9bb in test_list_cost_sum tests_orig/test_list_cost_sum.c:27\n    #2 0x557d6365cb8c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x557d6365d0c1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x557d6365db05 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x557d6365ec44 in main tests_orig/test_list_cost_sum.c:35\n    #6 0x7f1d456a7082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x557d6365280d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_07/tests_orig/test_list_cost_sum.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:32 in list_cost_sum\n==3195670==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[  FAILED  ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1,1.000000,1\n\" != \"item1,1.00,1\n\"\n[   LINE   ] --- tests_orig/test_list_save.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3195942==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x558388b74a42 bp 0x7ffc85d54130 sp 0x7ffc85d54090 T0)\n==3195942==The signal is caused by a READ memory access.\n==3195942==Hint: address points to the zero page.\n    #0 0x558388b74a41 in test_list_load tests_orig/test_list_load.c:28\n    #1 0x558388b72cf5 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x558388b7322a in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x558388b73c6e in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x558388b75216 in main tests_orig/test_list_load.c:44\n    #5 0x7f903ae63082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x558388b6886d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_07/tests_orig/test_list_load.bin+0x686d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_orig/test_list_load.c:28 in test_list_load\n==3195942==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0xb\n[   LINE   ] --- tests_orig/test_list_deduplicate.c:28: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        }
    },
    "passed": 3,
    "total": 12,
    "passed_functional": 3,
    "total_functional": 12
}
