{
    "results": {
        "test_list_init": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[       OK ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_init_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822084==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55575ae5a8d9 bp 0x7fff9db5ebc0 sp 0x7fff9db5ebc0 T0)\n==3822084==The signal is caused by a WRITE memory access.\n==3822084==Hint: address points to the zero page.\n    #0 0x55575ae5a8d8 in list_init parts/gen_list_init.c:28\n    #1 0x55575ae6674d in test_list_init_nullhead tests_ref/test_list_init_nullhead.c:23\n    #2 0x55575ae64b61 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55575ae650a1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55575ae65acf in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55575ae668fc in main tests_ref/test_list_init_nullhead.c:30\n    #6 0x7fdbffbc9fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fdbffbca07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55575ae5a804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_init_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_init.c:28 in list_init\n==3822084==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822286==ERROR: AddressSanitizer: SEGV on unknown address 0x55e1cf8d9710 (pc 0x7f247d48aa16 bp 0x55e1cf8d9710 sp 0x7ffc00fe9f20 T0)\n==3822286==The signal is caused by a WRITE memory access.\n    #0 0x7f247d48aa15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f247d48aa15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f247d48aa15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f247d48aa15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f247d56f3d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x55e1cf8d4423 in list_free test_common.h:35\n    #6 0x55e1cf8d4d49 in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:34\n    #7 0x55e1cf8d2c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x55e1cf8d3184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x55e1cf8d3bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x55e1cf8d4f4a in main tests_ref/test_list_add_item_at_pos.c:41\n    #11 0x7f247d263fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7f247d26407c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x55e1cf8c8804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_add_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3822286==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822518==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55e386f988ec bp 0x7fff58d533b0 sp 0x7fff58d53370 T0)\n==3822518==The signal is caused by a READ memory access.\n==3822518==Hint: address points to the zero page.\n    #0 0x55e386f988eb in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:39\n    #1 0x55e386fa4849 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x55e386fa2c44 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55e386fa3184 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55e386fa3bb2 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55e386fa49f8 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f2842f87fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f2842f8807c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55e386f98804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:39 in list_add_item_at_pos\n==3822518==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[       OK ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3822769==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f4939f3a667 bp 0x000000000031 sp 0x7ffd047ce700 T0)\n==3822769==The signal is caused by a WRITE memory access.\n==3822769==Hint: address points to the zero page.\n    #0 0x7f4939f3a666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7f4939f38de3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7f4939f38de3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7f4939f20b23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7f4939f20b23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7f4939f2cae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7f4939f2cae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7f493a171664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7f493a171bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x558e9ed7993d in list_item_to_string parts/gen_list_item_to_string.c:36\n    #10 0x558e9ed858e5 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x558e9ed83bbf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x558e9ed840ff in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x558e9ed84b2d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x558e9ed85b0c in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7f4939ed4fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7f4939ed507c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x558e9ed79824 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3822769==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3823172==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff8b514734 at pc 0x7f8733b68725 bp 0x7fff8b514540 sp 0x7fff8b513cd0\nWRITE of size 527 at 0x7fff8b514734 thread T0\n    #0 0x7f8733b68724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7f8733b68bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x5586bdb8d95d in list_item_to_string parts/gen_list_item_to_string.c:36\n    #3 0x5586bdb999ac in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x5586bdb97bdf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x5586bdb9811f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x5586bdb98b4d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x5586bdb99c61 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7f87338cbfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f87338cc07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x5586bdb8d844 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7fff8b514734 is located in stack of thread T0 at offset 196 in frame\n    #0 0x5586bdb997c1 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10007169a890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10007169a8a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10007169a8b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10007169a8c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1\n  0x10007169a8d0: f1 f1 00 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 00 00\n=>0x10007169a8e0: 00 00 00 00 00 00[04]f2 f2 f2 f2 f2 f2 f2 00 00\n  0x10007169a8f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10007169a900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10007169a910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10007169a920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f3 f3\n  0x10007169a930: f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3823172==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[       OK ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3823575==ERROR: AddressSanitizer: SEGV on unknown address 0x5624899ee750 (pc 0x7ff0ec3ada16 bp 0x5624899ee750 sp 0x7fff80c6be90 T0)\n==3823575==The signal is caused by a WRITE memory access.\n    #0 0x7ff0ec3ada15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7ff0ec3ada15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7ff0ec3ada15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7ff0ec3ada15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7ff0ec4923d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x5624899ea3cd in list_free test_common.h:35\n    #6 0x5624899eaa95 in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x5624899e8bee in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x5624899e912e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x5624899e9b5c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x5624899eac96 in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7ff0ec186fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #12 0x7ff0ec18707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #13 0x5624899de804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_update_item_at_pos.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3823575==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3823825==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5612ac0148e8 bp 0x7ffea20a9630 sp 0x7ffea20a9630 T0)\n==3823825==The signal is caused by a READ memory access.\n==3823825==Hint: address points to the zero page.\n    #0 0x5612ac0148e7 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:28\n    #1 0x5612ac0207fe in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x5612ac01ebee in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5612ac01f12e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5612ac01fb5c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5612ac0209ad in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7fba64e9afcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fba64e9b07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x5612ac014804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:28 in list_update_item_at_pos\n==3823825==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[       OK ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[       OK ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3824088==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55bbd44c08e2 bp 0x7ffe9207a390 sp 0x7ffe9207a390 T0)\n==3824088==The signal is caused by a READ memory access.\n==3824088==Hint: address points to the zero page.\n    #0 0x55bbd44c08e1 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:30\n    #1 0x55bbd44cc7df in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x55bbd44cabee in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55bbd44cb12e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55bbd44cbb5c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55bbd44cc98e in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7f247b26cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f247b26d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55bbd44c0804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:30 in list_remove_item_at_pos\n==3824088==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3824323==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x563c2f572952 bp 0x7ffe3a9d8a20 sp 0x7ffe3a9d8a20 T0)\n==3824323==The signal is caused by a READ memory access.\n==3824323==Hint: address points to the zero page.\n    #0 0x563c2f572951 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:45\n    #1 0x563c2f57e949 in test_list_remove_item_at_pos_oob tests_ref/test_list_remove_item_at_pos_oob.c:28\n    #2 0x563c2f57cbee in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x563c2f57d12e in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x563c2f57db5c in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x563c2f57ed0c in main tests_ref/test_list_remove_item_at_pos_oob.c:41\n    #6 0x7f7613f63fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f7613f6407c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x563c2f572804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_remove_item_at_pos_oob.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:45 in list_remove_item_at_pos\n==3824323==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1\" != \"item2\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3824560==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55864cc9a8f1 bp 0x7fff0b87a9d0 sp 0x7fff0b87a9d0 T0)\n==3824560==The signal is caused by a READ memory access.\n==3824560==Hint: address points to the zero page.\n    #0 0x55864cc9a8f0 in list_swap_item_positions parts/gen_list_swap_item_positions.c:30\n    #1 0x55864cca6859 in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x55864cca4c63 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55864cca51a3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55864cca5bd1 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55864cca6a08 in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7fb6f89dffcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fb6f89e007c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55864cc9a804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_swap_item_positions_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:30 in list_swap_item_positions\n==3824560==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[  FAILED  ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_oob.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[       OK ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[       OK ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[  FAILED  ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3824860==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55c52094992e bp 0x7ffd0508f210 sp 0x7ffd0508f210 T0)\n==3824860==The signal is caused by a WRITE memory access.\n==3824860==Hint: address points to the zero page.\n    #0 0x55c52094992d in list_cost_sum parts/gen_list_cost_sum.c:34\n    #1 0x55c52095595b in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x55c520953bb3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55c5209540f3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55c520954b21 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55c520955b82 in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7f9902fa6fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f9902fa707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55c520949804 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_cost_sum_nulltotal.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:34 in list_cost_sum\n==3824860==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[  FAILED  ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- ./test_common.h:55: error: No mock calls expected but called() was invoked in test_printf\n\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[  FAILED  ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- ./test_common.h:55: error: No mock calls expected but called() was invoked in test_printf\n\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save_nullfilename\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[  FAILED  ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- ./test_common.h:55: error: No mock calls expected but called() was invoked in test_printf\n\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save_badfile\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3825113==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5599afff3a05 bp 0x7fffe0134d10 sp 0x7fffe0134c70 T0)\n==3825113==The signal is caused by a READ memory access.\n==3825113==Hint: address points to the zero page.\n    #0 0x5599afff3a04 in test_list_load tests_ref/test_list_load.c:33\n    #1 0x5599afff1c4c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x5599afff218c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x5599afff2bba in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x5599afff44b5 in main tests_ref/test_list_load.c:53\n    #5 0x7f714a817fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #6 0x7f714a81807c in __libc_start_main_impl ../csu/libc-start.c:409\n    #7 0x5599affe7824 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_load.bin+0x6824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_load.c:33 in test_list_load\n==3825113==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3825304==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x564ae63d992f bp 0x7ffc8902e6e0 sp 0x7ffc8902e6a0 T0)\n==3825304==The signal is caused by a READ memory access.\n==3825304==Hint: address points to the zero page.\n    #0 0x564ae63d992e in list_load parts/gen_list_load.c:33\n    #1 0x564ae63e584a in test_list_load_nullhead tests_ref/test_list_load_nullhead.c:24\n    #2 0x564ae63e3c4c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x564ae63e418c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x564ae63e4bba in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x564ae63e59f9 in main tests_ref/test_list_load_nullhead.c:31\n    #6 0x7f19eaa24fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f19eaa2507c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x564ae63d9824 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_load_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_load.c:33 in list_load\n==3825304==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "=================================================================\n==3825522==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x611000000140 at pc 0x7f0db11994fd bp 0x7ffd9ca356e0 sp 0x7ffd9ca34e68\nWRITE of size 518 at 0x611000000140 thread T0\n    #0 0x7f0db11994fc in scanf_common ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors_format.inc:341\n    #1 0x7f0db119aa4f in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7f0db119ab5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x5639906ed9d1 in list_load parts/gen_list_load.c:44\n    #4 0x5639906f9a0a in test_list_load_longitem tests_ref/test_list_load_longitem.c:29\n    #5 0x5639906f7c6c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x5639906f81ac in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x5639906f8bda in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x5639906f9e19 in main tests_ref/test_list_load_longitem.c:40\n    #9 0x7f0db0f2cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f0db0f2d07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x5639906ed844 in _start (/home/gustavo/git/codex_study_grading/repos/36deba30-9345-480d-8221-387f5192f83d/tests_ref/test_list_load_longitem.bin+0x5844)\n\n0x611000000140 is located 0 bytes to the right of 256-byte region [0x611000000040,0x611000000140)\nallocated by thread T0 here:\n    #0 0x7f0db1238808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x5639906ed985 in list_load parts/gen_list_load.c:41\n    #2 0x5639906f9a0a in test_list_load_longitem tests_ref/test_list_load_longitem.c:29\n    #3 0x5639906f7c6c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5639906f81ac in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5639906f8bda in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5639906f9e19 in main tests_ref/test_list_load_longitem.c:40\n    #7 0x7f0db0f2cfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors_format.inc:341 in scanf_common\nShadow bytes around the buggy address:\n  0x0c227fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c227fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c227fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c227fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00\n  0x0c227fff8010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c227fff8020: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa\n  0x0c227fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c227fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c227fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c227fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c227fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3825522==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n[  FAILED  ] test_list_load_badparse\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_badparse.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_badparse\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0xb\n[   LINE   ] --- tests_ref/test_list_deduplicate.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n[  FAILED  ] test_list_deduplicate_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_deduplicate_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 19,
    "total": 45,
    "passed_functional": 14,
    "total_functional": 26
}
