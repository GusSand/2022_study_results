{
    "results": {
        "test_list_init": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[  FAILED  ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head\n[   LINE   ] --- tests_ref/test_list_init.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_init\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_init_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3179127==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55fe88f668fd bp 0x7ffc8468af80 sp 0x7ffc8468af60 T0)\n==3179127==The signal is caused by a WRITE memory access.\n==3179127==Hint: address points to the zero page.\n    #0 0x55fe88f668fc in list_init parts/gen_list_init.c:29\n    #1 0x55fe88f7277b in test_list_init_nullhead tests_ref/test_list_init_nullhead.c:23\n    #2 0x55fe88f70b52 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55fe88f71087 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55fe88f71acb in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55fe88f72942 in main tests_ref/test_list_init_nullhead.c:30\n    #6 0x7f93d0d65082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55fe88f6680d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_init_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_init.c:29 in list_init\n==3179127==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3180086==ERROR: AddressSanitizer: SEGV on unknown address 0x5638813287f0 (pc 0x7f34e2de2a16 bp 0x5638813287f0 sp 0x7ffe9fd09240 T0)\n==3180086==The signal is caused by a WRITE memory access.\n    #0 0x7f34e2de2a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f34e2de2a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f34e2de2a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f34e2de2a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f34e2ec73d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x563881323431 in list_free test_common.h:35\n    #6 0x563881323d6c in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:34\n    #7 0x563881321c2a in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x56388132215f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x563881322ba3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x563881323f85 in main tests_ref/test_list_add_item_at_pos.c:41\n    #11 0x7f34e2bec082 in __libc_start_main ../csu/libc-start.c:308\n    #12 0x56388131780d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_add_item_at_pos.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3180086==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3180244==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55a918956934 bp 0x7ffea2c4c180 sp 0x7ffea2c4c140 T0)\n==3180244==The signal is caused by a READ memory access.\n==3180244==Hint: address points to the zero page.\n    #0 0x55a918956933 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:43\n    #1 0x55a91896286c in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x55a918960c2a in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55a91896115f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55a918961ba3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55a918962a33 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7fc4d672e082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55a91895680d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:43 in list_add_item_at_pos\n==3180244==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3180642==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x561ba5451966 bp 0x7ffc6e080650 sp 0x7ffc6e080610 T0)\n==3180642==The signal is caused by a READ memory access.\n==3180642==Hint: address points to the zero page.\n    #0 0x561ba5451965 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:48\n    #1 0x561ba545d93e in test_list_add_item_at_pos_oob tests_ref/test_list_add_item_at_pos_oob.c:25\n    #2 0x561ba545bc2a in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x561ba545c15f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x561ba545cba3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x561ba545dc22 in main tests_ref/test_list_add_item_at_pos_oob.c:35\n    #6 0x7eff923fe082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x561ba545180d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_add_item_at_pos_oob.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:48 in list_add_item_at_pos\n==3180642==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3181117==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fb7c47e1ae7 bp 0x000000000031 sp 0x7ffd00fd3360 T0)\n==3181117==The signal is caused by a WRITE memory access.\n==3181117==Hint: address points to the zero page.\n    #0 0x7fb7c47e1ae6 in __GI__IO_str_overflow /build/glibc-SzIz7B/glibc-2.31/libio/strops.c:133\n    #1 0x7fb7c47e0023 in __GI__IO_default_xsputn /build/glibc-SzIz7B/glibc-2.31/libio/genops.c:399\n    #2 0x7fb7c47e0023 in __GI__IO_default_xsputn /build/glibc-SzIz7B/glibc-2.31/libio/genops.c:370\n    #3 0x7fb7c47c57ac in __vfprintf_internal /build/glibc-SzIz7B/glibc-2.31/stdio-common/vfprintf-internal.c:1687\n    #4 0x7fb7c47d31b7 in __vsprintf_internal /build/glibc-SzIz7B/glibc-2.31/libio/iovsprintf.c:95\n    #5 0x7fb7c47d31b7 in __vsprintf /build/glibc-SzIz7B/glibc-2.31/libio/iovsprintf.c:104\n    #6 0x7fb7c49de664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #7 0x7fb7c49debde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #8 0x558eb88f793d in list_item_to_string parts/gen_list_item_to_string.c:31\n    #9 0x558eb89038e7 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #10 0x558eb8901b84 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #11 0x558eb89020b9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #12 0x558eb8902afd in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #13 0x558eb8903b26 in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #14 0x7fb7c4772082 in __libc_start_main ../csu/libc-start.c:308\n    #15 0x558eb88f782d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_item_to_string_nullstr.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV /build/glibc-SzIz7B/glibc-2.31/libio/strops.c:133 in __GI__IO_str_overflow\n==3181117==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3182015==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd2e213444 at pc 0x7fd4944bd725 bp 0x7ffd2e213260 sp 0x7ffd2e2129f0\nWRITE of size 527 at 0x7ffd2e213444 thread T0\n    #0 0x7fd4944bd724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7fd4944bdbde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x55c64091c95d in list_item_to_string parts/gen_list_item_to_string.c:31\n    #3 0x55c6409289c2 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x55c640926ba4 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55c6409270d9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55c640927b1d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55c640928c90 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7fd494251082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x55c64091c84d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_item_to_string_longstr.bin+0x584d)\n\nAddress 0x7ffd2e213444 is located in stack of thread T0 at offset 180 in frame\n    #0 0x55c6409287c3 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [48, 56) 'head' (line 27)\n    [80, 180) 'str' (line 23)\n    [224, 736) 'longstr' (line 24) <== Memory access at offset 180 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x100025c3a630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100025c3a640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100025c3a650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100025c3a660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100025c3a670: 00 00 f1 f1 f1 f1 00 00 00 f2 f2 f2 00 00 00 00\n=>0x100025c3a680: 00 00 00 00 00 00 00 00[04]f2 f2 f2 f2 f2 00 00\n  0x100025c3a690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100025c3a6a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100025c3a6b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100025c3a6c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f3 f3\n  0x100025c3a6d0: f3 f3 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3182015==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[       OK ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3182685==ERROR: AddressSanitizer: SEGV on unknown address 0x557b92bb8830 (pc 0x7f0f934e9a16 bp 0x557b92bb8830 sp 0x7ffe30aeac10 T0)\n==3182685==The signal is caused by a WRITE memory access.\n    #0 0x7f0f934e9a15 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order) ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79\n    #1 0x7f0f934e9a15 in __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, void*, __sanitizer::BufferedStackTrace*) ../../../../src/libsanitizer/asan/asan_allocator.cc:552\n    #2 0x7f0f934e9a15 in __asan::Allocator::Deallocate(void*, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:629\n    #3 0x7f0f934e9a15 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) ../../../../src/libsanitizer/asan/asan_allocator.cc:865\n    #4 0x7f0f935ce3d8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:127\n    #5 0x557b92bb43cb in list_free test_common.h:35\n    #6 0x557b92bb4aaa in test_list_update_item_at_pos tests_ref/test_list_update_item_at_pos.c:31\n    #7 0x557b92bb2bc4 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #8 0x557b92bb30f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #9 0x557b92bb3b3d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #10 0x557b92bb4cc3 in main tests_ref/test_list_update_item_at_pos.c:38\n    #11 0x7f0f932f3082 in __libc_start_main ../csu/libc-start.c:308\n    #12 0x557b92ba880d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_update_item_at_pos.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_atomic_clang.h:79 in bool __sanitizer::atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t>(__sanitizer::atomic_uint8_t volatile*, __sanitizer::atomic_uint8_t::Type*, __sanitizer::atomic_uint8_t::Type, __sanitizer::memory_order)\n==3182685==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3183096==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x557b1576c8ee bp 0x7fff8cb99ba0 sp 0x7fff8cb99ba0 T0)\n==3183096==The signal is caused by a READ memory access.\n==3183096==Hint: address points to the zero page.\n    #0 0x557b1576c8ed in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:26\n    #1 0x557b15778811 in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x557b15776bc4 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x557b157770f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x557b15777b3d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x557b157789d8 in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7f3214b6b082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x557b1576c80d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:26 in list_update_item_at_pos\n==3183096==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_nullstr.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_nullstr\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[       OK ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[       OK ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3183500==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x559e778008e6 bp 0x7ffdf32d9d50 sp 0x7ffdf32d9d20 T0)\n==3183500==The signal is caused by a READ memory access.\n==3183500==Hint: address points to the zero page.\n    #0 0x559e778008e5 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:26\n    #1 0x559e7780c7f3 in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x559e7780abc5 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x559e7780b0fa in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x559e7780bb3e in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x559e7780c9ba in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7f65b96b1082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x559e7780080d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:26 in list_remove_item_at_pos\n==3183500==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[       OK ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[       OK ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3183973==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x557d1c66d8df bp 0x7ffd10aff210 sp 0x7ffd10aff210 T0)\n==3183973==The signal is caused by a READ memory access.\n==3183973==Hint: address points to the zero page.\n    #0 0x557d1c66d8de in list_swap_item_positions parts/gen_list_swap_item_positions.c:25\n    #1 0x557d1c679849 in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x557d1c677c16 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x557d1c67814b in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x557d1c678b8f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x557d1c679a10 in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7f24cf5e2082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x557d1c66d80d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_swap_item_positions_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:25 in list_swap_item_positions\n==3183973==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[       OK ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[       OK ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[       OK ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[       OK ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3184678==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55825798d93c bp 0x7ffdcfb5b660 sp 0x7ffdcfb5b660 T0)\n==3184678==The signal is caused by a WRITE memory access.\n==3184678==Hint: address points to the zero page.\n    #0 0x55825798d93b in list_cost_sum parts/gen_list_cost_sum.c:34\n    #1 0x55825799996b in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x558257997b86 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5582579980bb in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x558257998aff in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x558257999baa in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7f78c4d3e082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55825798d80d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_cost_sum_nulltotal.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:34 in list_cost_sum\n==3184678==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n[       OK ] test_list_load\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3185119==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55eff31e5938 bp 0x7ffccd873880 sp 0x7ffccd873840 T0)\n==3185119==The signal is caused by a READ memory access.\n==3185119==Hint: address points to the zero page.\n    #0 0x55eff31e5937 in list_load parts/gen_list_load.c:33\n    #1 0x55eff31f1895 in test_list_load_nullhead tests_ref/test_list_load_nullhead.c:24\n    #2 0x55eff31efc5a in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55eff31f018f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55eff31f0bd3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55eff31f1a5c in main tests_ref/test_list_load_nullhead.c:31\n    #6 0x7f4b583a8082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55eff31e582d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_load_nullhead.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_load.c:33 in list_load\n==3185119==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3185520==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x558e2e3f1971 bp 0x7ffc1eeeb680 sp 0x7ffc1eeeb640 T0)\n==3185520==The signal is caused by a READ memory access.\n==3185520==Hint: address points to the zero page.\n    #0 0x558e2e3f1970 in list_load parts/gen_list_load.c:34\n    #1 0x558e2e3fda55 in test_list_load_longitem tests_ref/test_list_load_longitem.c:29\n    #2 0x558e2e3fbc7a in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x558e2e3fc1af in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x558e2e3fcbf3 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x558e2e3fde72 in main tests_ref/test_list_load_longitem.c:40\n    #6 0x7f49cbcd4082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x558e2e3f184d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_load_longitem.bin+0x584d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_load.c:34 in list_load\n==3185520==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n[  FAILED  ] test_list_load_badparse\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_badparse.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_badparse\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[       OK ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3185681==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x56108ac788dd bp 0x7ffd665df980 sp 0x7ffd665df950 T0)\n==3185681==The signal is caused by a READ memory access.\n==3185681==Hint: address points to the zero page.\n    #0 0x56108ac788dc in list_deduplicate parts/gen_list_deduplicate.c:27\n    #1 0x56108ac847f8 in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x56108ac82bcf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56108ac83104 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56108ac83b48 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56108ac849bf in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7f064c4e7082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x56108ac7880d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_02/tests_ref/test_list_deduplicate_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:27 in list_deduplicate\n==3185681==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 26,
    "total": 45,
    "passed_functional": 19,
    "total_functional": 26
}
