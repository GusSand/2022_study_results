{
    "results": {
        "test_list_init": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[       OK ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[  FAILED  ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_orig/test_list_add_item_at_pos.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n[       OK ] test_list_update_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3213063==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x560f0cc58956 bp 0x7ffc1335ecd0 sp 0x7ffc1335eca0 T0)\n==3213063==The signal is caused by a WRITE memory access.\n==3213063==Hint: address points to the zero page.\n    #0 0x560f0cc58955 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:42\n    #1 0x560f0cc64922 in test_list_remove_item_at_pos tests_orig/test_list_remove_item_at_pos.c:24\n    #2 0x560f0cc62be1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x560f0cc63116 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x560f0cc63b5a in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x560f0cc64b84 in main tests_orig/test_list_remove_item_at_pos.c:32\n    #6 0x7f9cb51d6082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x560f0cc5880d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_08/tests_orig/test_list_remove_item_at_pos.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:42 in list_remove_item_at_pos\n==3213063==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3213704==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x5636b6f919f0 bp 0x7ffc65b34290 sp 0x7ffc65b34290 T0)\n==3213704==The signal is caused by a WRITE memory access.\n==3213704==Hint: address points to the zero page.\n    #0 0x5636b6f919ef in list_swap_item_positions parts/gen_list_swap_item_positions.c:70\n    #1 0x5636b6f9d9f5 in test_list_swap_item_positions tests_orig/test_list_swap_item_positions.c:25\n    #2 0x5636b6f9bc6e in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5636b6f9c1a3 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5636b6f9cbe7 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5636b6f9dcfb in main tests_orig/test_list_swap_item_positions.c:34\n    #6 0x7f81f60bb082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x5636b6f9180d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_08/tests_orig/test_list_swap_item_positions.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:70 in list_swap_item_positions\n==3213704==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[       OK ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3213992==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5636412479d2 bp 0x7ffc25598590 sp 0x7ffc255984f0 T0)\n==3213992==The signal is caused by a READ memory access.\n==3213992==Hint: address points to the zero page.\n    #0 0x5636412479d1 in test_list_load tests_orig/test_list_load.c:28\n    #1 0x563641245c85 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x5636412461ba in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x563641246bfe in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x5636412481a6 in main tests_orig/test_list_load.c:44\n    #5 0x7f535149e082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x56364123b88d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_08/tests_orig/test_list_load.bin+0x688d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_orig/test_list_load.c:28 in test_list_load\n==3213992==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[       OK ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 8,
    "total": 12,
    "passed_functional": 8,
    "total_functional": 12
}
