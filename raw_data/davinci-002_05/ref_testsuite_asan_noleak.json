{
    "results": {
        "test_list_init": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[       OK ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_init_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3185207==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55863aa738d9 bp 0x7ffd3226d3c0 sp 0x7ffd3226d3c0 T0)\n==3185207==The signal is caused by a WRITE memory access.\n==3185207==Hint: address points to the zero page.\n    #0 0x55863aa738d8 in list_init parts/gen_list_init.c:25\n    #1 0x55863aa7f74f in test_list_init_nullhead tests_ref/test_list_init_nullhead.c:23\n    #2 0x55863aa7db26 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55863aa7e05b in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55863aa7ea9f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55863aa7f916 in main tests_ref/test_list_init_nullhead.c:30\n    #6 0x7fe65ad79082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55863aa7380d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_init_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_init.c:25 in list_init\n==3185207==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[       OK ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3185600==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x556aff5119a3 bp 0x7ffdb3233a90 sp 0x7ffdb3233a50 T0)\n==3185600==The signal is caused by a READ memory access.\n==3185600==Hint: address points to the zero page.\n    #0 0x556aff5119a2 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:48\n    #1 0x556aff51d89d in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x556aff51bc5b in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x556aff51c190 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x556aff51cbd4 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x556aff51da64 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f7bc4e62082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x556aff51182d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:48 in list_add_item_at_pos\n==3185600==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3186100==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f67946d36e5 bp 0x7ffd79cd2850 sp 0x7ffd79cd1fc8 T0)\n==3186100==The signal is caused by a READ memory access.\n==3186100==Hint: address points to the zero page.\n    #0 0x7f67946d36e4  (/lib/x86_64-linux-gnu/libc.so.6+0x1886e4)\n    #1 0x7f67947a490b in __interceptor_strlen ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:352\n    #2 0x55c1b1afd932 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:39\n    #3 0x55c1b1b0996b in test_list_add_item_at_pos_nullitem tests_ref/test_list_add_item_at_pos_nullitem.c:25\n    #4 0x55c1b1b07c5b in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55c1b1b08190 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55c1b1b08bd4 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55c1b1b09b84 in main tests_ref/test_list_add_item_at_pos_nullitem.c:32\n    #8 0x7f679456f082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x55c1b1afd82d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_add_item_at_pos_nullitem.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libc.so.6+0x1886e4) \n==3186100==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3186773==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x56340147ca11 bp 0x7ffe8df889f0 sp 0x7ffe8df889b0 T0)\n==3186773==The signal is caused by a WRITE memory access.\n==3186773==Hint: address points to the zero page.\n    #0 0x56340147ca10 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:60\n    #1 0x56340148896f in test_list_add_item_at_pos_oob tests_ref/test_list_add_item_at_pos_oob.c:25\n    #2 0x563401486c5b in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x563401487190 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x563401487bd4 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x563401488c53 in main tests_ref/test_list_add_item_at_pos_oob.c:35\n    #6 0x7fbf6ff38082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x56340147c82d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_add_item_at_pos_oob.bin+0x682d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:60 in list_add_item_at_pos\n==3186773==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3187225==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f2715031ae7 bp 0x000000000031 sp 0x7ffe24648420 T0)\n==3187225==The signal is caused by a WRITE memory access.\n==3187225==Hint: address points to the zero page.\n    #0 0x7f2715031ae6 in __GI__IO_str_overflow /build/glibc-SzIz7B/glibc-2.31/libio/strops.c:133\n    #1 0x7f2715030023 in __GI__IO_default_xsputn /build/glibc-SzIz7B/glibc-2.31/libio/genops.c:399\n    #2 0x7f2715030023 in __GI__IO_default_xsputn /build/glibc-SzIz7B/glibc-2.31/libio/genops.c:370\n    #3 0x7f27150157ac in __vfprintf_internal /build/glibc-SzIz7B/glibc-2.31/stdio-common/vfprintf-internal.c:1687\n    #4 0x7f27150231b7 in __vsprintf_internal /build/glibc-SzIz7B/glibc-2.31/libio/iovsprintf.c:95\n    #5 0x7f27150231b7 in __vsprintf /build/glibc-SzIz7B/glibc-2.31/libio/iovsprintf.c:104\n    #6 0x7f271522e664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #7 0x7f271522ebde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #8 0x55964c0e193d in list_item_to_string parts/gen_list_item_to_string.c:31\n    #9 0x55964c0ed8e7 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #10 0x55964c0ebb84 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #11 0x55964c0ec0b9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #12 0x55964c0ecafd in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #13 0x55964c0edb26 in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #14 0x7f2714fc2082 in __libc_start_main ../csu/libc-start.c:308\n    #15 0x55964c0e182d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_item_to_string_nullstr.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV /build/glibc-SzIz7B/glibc-2.31/libio/strops.c:133 in __GI__IO_str_overflow\n==3187225==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3187752==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffde8f4eda4 at pc 0x7fce1a244725 bp 0x7ffde8f4ebc0 sp 0x7ffde8f4e350\nWRITE of size 527 at 0x7ffde8f4eda4 thread T0\n    #0 0x7fce1a244724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7fce1a244bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x562ffaa7995d in list_item_to_string parts/gen_list_item_to_string.c:31\n    #3 0x562ffaa859c2 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x562ffaa83ba4 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x562ffaa840d9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x562ffaa84b1d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x562ffaa85c90 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7fce19fd8082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x562ffaa7984d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_item_to_string_longstr.bin+0x584d)\n\nAddress 0x7ffde8f4eda4 is located in stack of thread T0 at offset 180 in frame\n    #0 0x562ffaa857c3 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [48, 56) 'head' (line 27)\n    [80, 180) 'str' (line 23)\n    [224, 736) 'longstr' (line 24) <== Memory access at offset 180 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10003d1e1d60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003d1e1d70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003d1e1d80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003d1e1d90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1\n  0x10003d1e1da0: f1 f1 00 00 00 f2 f2 f2 00 00 00 00 00 00 00 00\n=>0x10003d1e1db0: 00 00 00 00[04]f2 f2 f2 f2 f2 00 00 00 00 00 00\n  0x10003d1e1dc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003d1e1dd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003d1e1de0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003d1e1df0: 00 00 00 00 00 00 00 00 00 00 f3 f3 f3 f3 f3 f3\n  0x10003d1e1e00: f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3187752==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n[       OK ] test_list_update_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3188248==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5614e3ef4912 bp 0x7ffdf62e86d0 sp 0x7ffdf62e86a0 T0)\n==3188248==The signal is caused by a READ memory access.\n==3188248==Hint: address points to the zero page.\n    #0 0x5614e3ef4911 in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:26\n    #1 0x5614e3f00839 in test_list_update_item_at_pos_nullhead tests_ref/test_list_update_item_at_pos_nullhead.c:24\n    #2 0x5614e3efebec in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5614e3eff121 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5614e3effb65 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5614e3f00a00 in main tests_ref/test_list_update_item_at_pos_nullhead.c:31\n    #6 0x7fe1a43d2082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x5614e3ef482d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_update_item_at_pos_nullhead.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_update_item_at_pos.c:26 in list_update_item_at_pos\n==3188248==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3188720==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7feae2c036e5 bp 0x7fffd68e9b40 sp 0x7fffd68e92a8 T0)\n==3188720==The signal is caused by a READ memory access.\n==3188720==Hint: address points to the zero page.\n    #0 0x7feae2c036e4  (/lib/x86_64-linux-gnu/libc.so.6+0x1886e4)\n    #1 0x7feae2d08cf5 in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:428\n    #2 0x55942ae2a92e in list_update_item_at_pos parts/gen_list_update_item_at_pos.c:27\n    #3 0x55942ae3693e in test_list_update_item_at_pos_nullstr tests_ref/test_list_update_item_at_pos_nullstr.c:26\n    #4 0x55942ae34bec in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55942ae35121 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55942ae35b65 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55942ae36cdb in main tests_ref/test_list_update_item_at_pos_nullstr.c:38\n    #8 0x7feae2a9f082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x55942ae2a82d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_update_item_at_pos_nullstr.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libc.so.6+0x1886e4) \n==3188720==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[       OK ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3189636==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55892cd538e6 bp 0x7fff71f448e0 sp 0x7fff71f448b0 T0)\n==3189636==The signal is caused by a READ memory access.\n==3189636==Hint: address points to the zero page.\n    #0 0x55892cd538e5 in list_remove_item_at_pos parts/gen_list_remove_item_at_pos.c:26\n    #1 0x55892cd5f7fa in test_list_remove_item_at_pos_nullhead tests_ref/test_list_remove_item_at_pos_nullhead.c:23\n    #2 0x55892cd5dbcc in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55892cd5e101 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55892cd5eb45 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55892cd5f9c1 in main tests_ref/test_list_remove_item_at_pos_nullhead.c:30\n    #6 0x7fcb0922e082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55892cd5380d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_remove_item_at_pos_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_remove_item_at_pos.c:26 in list_remove_item_at_pos\n==3189636==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[  FAILED  ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos_oob.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item3\" != \"item2\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:33: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3190026==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5601322648fd bp 0x7ffc5801e070 sp 0x7ffc5801e070 T0)\n==3190026==The signal is caused by a READ memory access.\n==3190026==Hint: address points to the zero page.\n    #0 0x5601322648fc in list_swap_item_positions parts/gen_list_swap_item_positions.c:29\n    #1 0x56013227093f in test_list_swap_item_positions_nullhead tests_ref/test_list_swap_item_positions_nullhead.c:23\n    #2 0x56013226ed0c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56013226f241 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56013226fc85 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x560132270b06 in main tests_ref/test_list_swap_item_positions_nullhead.c:30\n    #6 0x7efe4434e082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x56013226480d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_swap_item_positions_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_swap_item_positions.c:29 in list_swap_item_positions\n==3190026==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[  FAILED  ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[  FAILED  ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x2 != 0x3\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3190843==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x561d937a78dd bp 0x7ffe86f3b330 sp 0x7ffe86f3b330 T0)\n==3190843==The signal is caused by a WRITE memory access.\n==3190843==Hint: address points to the zero page.\n    #0 0x561d937a78dc in list_find_highest_price_item_position parts/gen_list_find_highest_price_item_position.c:25\n    #1 0x561d937b38b6 in test_list_find_highest_price_item_position_nullpos tests_ref/test_list_find_highest_price_item_position_nullpos.c:25\n    #2 0x561d937b1b94 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x561d937b20c9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x561d937b2b0d in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x561d937b3acd in main tests_ref/test_list_find_highest_price_item_position_nullpos.c:32\n    #6 0x7fd34f800082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x561d937a780d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_find_highest_price_item_position_nullpos.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_find_highest_price_item_position.c:25 in list_find_highest_price_item_position\n==3190843==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[  FAILED  ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3191079==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563911fed8e1 bp 0x7fffddfbc980 sp 0x7fffddfbc980 T0)\n==3191079==The signal is caused by a WRITE memory access.\n==3191079==Hint: address points to the zero page.\n    #0 0x563911fed8e0 in list_cost_sum parts/gen_list_cost_sum.c:25\n    #1 0x563911ff9951 in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x563911ff7b6c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x563911ff80a1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x563911ff8ae5 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x563911ff9b90 in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7fcbb83ed082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x563911fed80d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_cost_sum_nulltotal.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:25 in list_cost_sum\n==3191079==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3191537==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x562b09833b9f bp 0x7fff405094e0 sp 0x7fff40509440 T0)\n==3191537==The signal is caused by a READ memory access.\n==3191537==Hint: address points to the zero page.\n    #0 0x562b09833b9e in test_list_load tests_ref/test_list_load.c:36\n    #1 0x562b09831c27 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x562b0983215c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x562b09832ba0 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x562b098344ed in main tests_ref/test_list_load.c:53\n    #5 0x7f42b5f4f082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x562b0982782d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_load.bin+0x682d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_load.c:36 in test_list_load\n==3191537==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n[  FAILED  ] test_list_load_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_nullhead.c:24: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3192026==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55d3b3949a89 bp 0x7ffdae5c5ee0 sp 0x7ffdae5c5c00 T0)\n==3192026==The signal is caused by a READ memory access.\n==3192026==Hint: address points to the zero page.\n    #0 0x55d3b3949a88 in test_list_load_longitem tests_ref/test_list_load_longitem.c:30\n    #1 0x55d3b3947c47 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x55d3b394817c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x55d3b3948bc0 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x55d3b3949e3f in main tests_ref/test_list_load_longitem.c:40\n    #5 0x7f7b7a003082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x55d3b393d84d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_load_longitem.bin+0x584d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_load_longitem.c:30 in test_list_load_longitem\n==3192026==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n[  FAILED  ] test_list_load_badparse\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_load_badparse.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_badparse\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[       OK ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3192847==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55a07f1c18dd bp 0x7ffdb97b8040 sp 0x7ffdb97b8010 T0)\n==3192847==The signal is caused by a READ memory access.\n==3192847==Hint: address points to the zero page.\n    #0 0x55a07f1c18dc in list_deduplicate parts/gen_list_deduplicate.c:27\n    #1 0x55a07f1cd814 in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x55a07f1cbbeb in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55a07f1cc120 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55a07f1ccb64 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55a07f1cd9db in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7f56abdfc082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55a07f1c180d in _start (/home/moyix/git/codex_study_grading/repos/davinci-002_05/tests_ref/test_list_deduplicate_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:27 in list_deduplicate\n==3192847==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 19,
    "total": 45,
    "passed_functional": 15,
    "total_functional": 26
}
