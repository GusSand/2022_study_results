{
    "results": {
        "test_list_init": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[  FAILED  ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head\n[   LINE   ] --- tests_ref/test_list_init.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_init\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_init_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3030665==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x56216f6da8ea bp 0x7ffe551d87c0 sp 0x7ffe551d87b0 T0)\n==3030665==The signal is caused by a WRITE memory access.\n==3030665==Hint: address points to the zero page.\n    #0 0x56216f6da8e9 in list_init parts/gen_list_init.c:26\n    #1 0x56216f6e67c5 in test_list_init_nullhead tests_ref/test_list_init_nullhead.c:23\n    #2 0x56216f6e4b9c in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x56216f6e50d1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x56216f6e5b15 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x56216f6e698c in main tests_ref/test_list_init_nullhead.c:30\n    #6 0x7f60050d6082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x56216f6da80d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_05/tests_ref/test_list_init_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_init.c:26 in list_init\n==3030665==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[  FAILED  ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n[       OK ] test_list_add_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[       OK ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[       OK ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[  FAILED  ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_item_to_string: string not long enough\n[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_item_to_string.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_item_to_string\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_item_to_string: node is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n[       OK ] test_list_item_to_string_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_item_to_string: string is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n[       OK ] test_list_item_to_string_longstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_item_to_string: string not long enough\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[       OK ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[       OK ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_print: node is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[  FAILED  ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n[       OK ] test_list_remove_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[       OK ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[  FAILED  ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[       OK ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[       OK ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[       OK ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_cost_sum: node is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n[       OK ] test_list_cost_sum_nulltotal\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_cost_sum: total is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[  FAILED  ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"1 * item1 @ $1.00 ea\n\" != \"item1,1.00,1\n\"\n[   LINE   ] --- tests_ref/test_list_save.c:40: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_save: node is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_save: filename is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3031227==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000000c0 (pc 0x7f50fa9798a6 bp 0x7ffcd01c2840 sp 0x7ffcd01c22d0 T0)\n==3031227==The signal is caused by a READ memory access.\n==3031227==Hint: address points to the zero page.\n    #0 0x7f50fa9798a5 in __vfprintf_internal /build/glibc-SzIz7B/glibc-2.31/stdio-common/vfprintf-internal.c:1320\n    #1 0x7f50fab92f88 in __interceptor_vfprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1604\n    #2 0x7f50fab930be in __interceptor_fprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1661\n    #3 0x558a35a159dc in list_save parts/gen_list_save.c:47\n    #4 0x558a35a21a92 in test_list_save_badfile tests_ref/test_list_save_badfile.c:31\n    #5 0x558a35a1fc5d in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x558a35a20192 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x558a35a20bd6 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x558a35a21cd7 in main tests_ref/test_list_save_badfile.c:39\n    #9 0x7f50fa927082 in __libc_start_main ../csu/libc-start.c:308\n    #10 0x558a35a1582d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_05/tests_ref/test_list_save_badfile.bin+0x582d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV /build/glibc-SzIz7B/glibc-2.31/stdio-common/vfprintf-internal.c:1320 in __vfprintf_internal\n==3031227==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "=================================================================\n==3031536==ERROR: AddressSanitizer: heap-use-after-free on address 0x60c000000040 at pc 0x7f0dd9c57c75 bp 0x7ffe0807e730 sp 0x7ffe0807ded8\nREAD of size 1 at 0x60c000000040 thread T0\n    #0 0x7f0dd9c57c74 in __interceptor_strcmp ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:430\n    #1 0x561c17b7a2d9 in string_equal_display_error cmocka/cmocka.c:1396\n    #2 0x561c17b7b7c2 in _assert_string_equal cmocka/cmocka.c:1913\n    #3 0x561c17b80b5a in test_list_load tests_ref/test_list_load.c:33\n    #4 0x561c17b7ed47 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x561c17b7f27c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x561c17b7fcc0 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x561c17b8160d in main tests_ref/test_list_load.c:53\n    #8 0x7f0dd99b3082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x561c17b7486d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_05/tests_ref/test_list_load.bin+0x686d)\n\n0x60c000000040 is located 0 bytes inside of 120-byte region [0x60c000000040,0x60c0000000b8)\nfreed by thread T0 here:\n    #0 0x7f0dd9c8e40f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x561c17b74ae0 in list_load parts/gen_list_load.c:63\n    #2 0x561c17b80adc in test_list_load tests_ref/test_list_load.c:27\n    #3 0x561c17b7ed47 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x561c17b7f27c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x561c17b7fcc0 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x561c17b8160d in main tests_ref/test_list_load.c:53\n    #7 0x7f0dd99b3082 in __libc_start_main ../csu/libc-start.c:308\n\npreviously allocated by thread T0 here:\n    #0 0x7f0dd9c8e808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x7f0dd9a12543 in _IO_getdelim /build/glibc-SzIz7B/glibc-2.31/libio/iogetdelim.c:62\n\nSUMMARY: AddressSanitizer: heap-use-after-free ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:430 in __interceptor_strcmp\nShadow bytes around the buggy address:\n  0x0c187fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c187fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c187fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c187fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c187fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c187fff8000: fa fa fa fa fa fa fa fa[fd]fd fd fd fd fd fd fd\n  0x0c187fff8010: fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa\n  0x0c187fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c187fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c187fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c187fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3031536==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3032042==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5596d01a1950 bp 0x7fff515018f0 sp 0x7fff515018a0 T0)\n==3032042==The signal is caused by a READ memory access.\n==3032042==Hint: address points to the zero page.\n    #0 0x5596d01a194f in list_load parts/gen_list_load.c:30\n    #1 0x5596d01ad982 in test_list_load_nullhead tests_ref/test_list_load_nullhead.c:24\n    #2 0x5596d01abd47 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5596d01ac27c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5596d01accc0 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5596d01adb49 in main tests_ref/test_list_load_nullhead.c:31\n    #6 0x7f9bc8efb082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x5596d01a186d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_05/tests_ref/test_list_load_nullhead.bin+0x686d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_load.c:30 in list_load\n==3032042==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_load: node is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n[  FAILED  ] test_list_load_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_load: node is null\n[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_load_longitem.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3032528==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fa9214f5c3b bp 0x7ffda4ca12d0 sp 0x7ffda4ca0e00 T0)\n==3032528==The signal is caused by a READ memory access.\n==3032528==Hint: address points to the zero page.\n    #0 0x7fa9214f5c3a in __GI_____strtod_l_internal /build/glibc-SzIz7B/glibc-2.31/stdlib/strtod_l.c:611\n    #1 0x5654fc3bda3e in list_load parts/gen_list_load.c:54\n    #2 0x5654fc3c9adc in test_list_load_badparse tests_ref/test_list_load_badparse.c:27\n    #3 0x5654fc3c7d47 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5654fc3c827c in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5654fc3c8cc0 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5654fc3c9eed in main tests_ref/test_list_load_badparse.c:39\n    #7 0x7fa9214cd082 in __libc_start_main ../csu/libc-start.c:308\n    #8 0x5654fc3bd86d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_05/tests_ref/test_list_load_badparse.bin+0x686d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV /build/glibc-SzIz7B/glibc-2.31/stdlib/strtod_l.c:611 in __GI_____strtod_l_internal\n==3032528==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_load: node is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "list_load: node is null\n[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3032851==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x561856ad19e1 bp 0x7fff5523fb80 sp 0x7fff5523faf0 T0)\n==3032851==The signal is caused by a READ memory access.\n==3032851==Hint: address points to the zero page.\n    #0 0x561856ad19e0 in test_list_deduplicate tests_ref/test_list_deduplicate.c:28\n    #1 0x561856acfc05 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x561856ad013a in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x561856ad0b7e in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x561856ad1d8b in main tests_ref/test_list_deduplicate.c:39\n    #5 0x7fe6aef8e082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x561856ac580d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_05/tests_ref/test_list_deduplicate.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_deduplicate.c:28 in test_list_deduplicate\n==3032851==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3033121==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x556a1e3028dd bp 0x7ffeb61d5ba0 sp 0x7ffeb61d5b70 T0)\n==3033121==The signal is caused by a READ memory access.\n==3033121==Hint: address points to the zero page.\n    #0 0x556a1e3028dc in list_deduplicate parts/gen_list_deduplicate.c:28\n    #1 0x556a1e30e82e in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x556a1e30cc05 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x556a1e30d13a in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x556a1e30db7e in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x556a1e30e9f5 in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7f890057a082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x556a1e30280d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_05/tests_ref/test_list_deduplicate_nullhead.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:28 in list_deduplicate\n==3033121==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 22,
    "total": 45,
    "passed_functional": 9,
    "total_functional": 26
}
