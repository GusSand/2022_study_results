{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3810227==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x556b6ea229e5 bp 0x7fff7952e4f0 sp 0x7fff7952e460 T0)\n==3810227==The signal is caused by a READ memory access.\n==3810227==Hint: address points to the zero page.\n    #0 0x556b6ea229e4 in test_list_add_item_at_pos tests_ref/test_list_add_item_at_pos.c:29\n    #1 0x556b6ea20bed in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x556b6ea2112d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x556b6ea21b5b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x556b6ea22ef3 in main tests_ref/test_list_add_item_at_pos.c:41\n    #5 0x7f9c7ca4efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #6 0x7f9c7ca4f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #7 0x556b6ea16804 in _start (/home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/tests_ref/test_list_add_item_at_pos.bin+0x6804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_add_item_at_pos.c:29 in test_list_add_item_at_pos\n==3810227==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3810591==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5615f8f598fa bp 0x7ffc29677290 sp 0x7ffc29677250 T0)\n==3810591==The signal is caused by a READ memory access.\n==3810591==Hint: address points to the zero page.\n    #0 0x5615f8f598f9 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:40\n    #1 0x5615f8f657f2 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x5615f8f63bed in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5615f8f6412d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5615f8f64b5b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5615f8f659a1 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7f6dee5b7fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f6dee5b807c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x5615f8f59804 in _start (/home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:40 in list_add_item_at_pos\n==3810591==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_nullitem.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_nullitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n\n=================================================================\n==3810950==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7f2001a6e808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55ffad2b18f1 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:39\n    #2 0x55ffad2bd8c0 in test_list_add_item_at_pos_nullitem tests_ref/test_list_add_item_at_pos_nullitem.c:25\n    #3 0x55ffad2bbbed in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55ffad2bc12d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55ffad2bcb5b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55ffad2bdac1 in main tests_ref/test_list_add_item_at_pos_nullitem.c:32\n    #7 0x7f2001762fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: 24 byte(s) leaked in 1 allocation(s).\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n\n=================================================================\n==3811257==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7f117e7bb808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55bd3dfce8f1 in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:39\n    #2 0x55bd3dfda8c4 in test_list_add_item_at_pos_oob tests_ref/test_list_add_item_at_pos_oob.c:25\n    #3 0x55bd3dfd8bed in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55bd3dfd912d in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55bd3dfd9b5b in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55bd3dfdab90 in main tests_ref/test_list_add_item_at_pos_oob.c:35\n    #7 0x7f117e4affcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: 24 byte(s) leaked in 1 allocation(s).\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3811558==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55d186bb3901 bp 0x7ffdae3b9e90 sp 0x7ffdae3b9e80 T0)\n==3811558==The signal is caused by a READ memory access.\n==3811558==Hint: address points to the zero page.\n    #0 0x55d186bb3900 in list_item_to_string parts/gen_list_item_to_string.c:32\n    #1 0x55d186bbf82c in test_list_item_to_string_nullhead tests_ref/test_list_item_to_string_nullhead.c:24\n    #2 0x55d186bbdbb1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55d186bbe0f1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55d186bbeb1f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55d186bbfa5b in main tests_ref/test_list_item_to_string_nullhead.c:31\n    #6 0x7fc308a32fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fc308a3307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55d186bb3824 in _start (/home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/tests_ref/test_list_item_to_string_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_item_to_string.c:32 in list_item_to_string\n==3811558==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3811833==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f940f0e4667 bp 0x000000000031 sp 0x7ffe4613fad0 T0)\n==3811833==The signal is caused by a WRITE memory access.\n==3811833==Hint: address points to the zero page.\n    #0 0x7f940f0e4666 in __GI__IO_str_overflow libio/strops.c:133\n    #1 0x7f940f0e2de3 in __GI__IO_default_xsputn libio/genops.c:399\n    #2 0x7f940f0e2de3 in __GI__IO_default_xsputn libio/genops.c:370\n    #3 0x7f940f0cab23 in outstring_func stdio-common/vfprintf-internal.c:239\n    #4 0x7f940f0cab23 in __vfprintf_internal stdio-common/vfprintf-internal.c:1646\n    #5 0x7f940f0d6ae7 in __vsprintf_internal libio/iovsprintf.c:95\n    #6 0x7f940f0d6ae7 in __vsprintf libio/iovsprintf.c:104\n    #7 0x7f940f31b664 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #8 0x7f940f31bbde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #9 0x56255596192f in list_item_to_string parts/gen_list_item_to_string.c:31\n    #10 0x56255596d8d7 in test_list_item_to_string_nullstr tests_ref/test_list_item_to_string_nullstr.c:26\n    #11 0x56255596bbb1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #12 0x56255596c0f1 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #13 0x56255596cb1f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #14 0x56255596dafe in main tests_ref/test_list_item_to_string_nullstr.c:34\n    #15 0x7f940f07efcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #16 0x7f940f07f07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #17 0x562555961824 in _start (/home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/tests_ref/test_list_item_to_string_nullstr.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV libio/strops.c:133 in __GI__IO_str_overflow\n==3811833==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3812315==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffed45e5674 at pc 0x7ff2acbf8725 bp 0x7ffed45e5480 sp 0x7ffed45e4c10\nWRITE of size 527 at 0x7ffed45e5674 thread T0\n    #0 0x7ff2acbf8724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7ff2acbf8bde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x560b2038f94f in list_item_to_string parts/gen_list_item_to_string.c:31\n    #3 0x560b2039b99e in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x560b20399bd1 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x560b2039a111 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x560b2039ab3f in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x560b2039bc53 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7ff2ac95bfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7ff2ac95c07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x560b2038f844 in _start (/home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffed45e5674 is located in stack of thread T0 at offset 196 in frame\n    #0 0x560b2039b7b3 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10005a8b4a70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005a8b4a80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005a8b4a90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005a8b4aa0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005a8b4ab0: 00 00 00 00 00 00 f1 f1 f1 f1 00 f2 f2 f2 f2 f2\n=>0x10005a8b4ac0: f2 f2 00 00 00 00 00 00 00 00 00 00 00 00[04]f2\n  0x10005a8b4ad0: f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00\n  0x10005a8b4ae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005a8b4af0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005a8b4b00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10005a8b4b10: 00 00 00 00 00 00 f3 f3 f3 f3 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3812315==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[  FAILED  ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"1: 3 * banana @ $1.00 ea\n2: 2 * orange @ $2.00 ea\n\" != \"1: 3 * banana @ $1.00 ea\n2: 2 * orange @ $2.00 ea\n3: 4 * apple @ $3.00 ea\n\"\n[   LINE   ] --- tests_ref/test_list_print.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n\n=================================================================\n==3812745==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7f2f05a01808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55f9912addf3 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/reflist.c:114\n    #2 0x55f9912b9890 in test_list_print tests_ref/test_list_print.c:25\n    #3 0x55f9912b7bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55f9912b80f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55f9912b8b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55f9912b9be6 in main tests_ref/test_list_print.c:43\n    #7 0x7f2f056f5fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7f2f05a01808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55f9912addf3 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/reflist.c:114\n    #2 0x55f9912b98d1 in test_list_print tests_ref/test_list_print.c:26\n    #3 0x55f9912b7bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55f9912b80f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55f9912b8b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55f9912b9be6 in main tests_ref/test_list_print.c:43\n    #7 0x7f2f056f5fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7f2f05a01808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55f9912addf3 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/reflist.c:114\n    #2 0x55f9912b9912 in test_list_print tests_ref/test_list_print.c:27\n    #3 0x55f9912b7bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55f9912b80f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55f9912b8b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55f9912b9be6 in main tests_ref/test_list_print.c:43\n    #7 0x7f2f056f5fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 7 byte(s) in 1 object(s) allocated from:\n    #0 0x7f2f0598a3ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x55f9912ade14 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/reflist.c:118\n    #2 0x55f9912b9890 in test_list_print tests_ref/test_list_print.c:25\n    #3 0x55f9912b7bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55f9912b80f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55f9912b8b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55f9912b9be6 in main tests_ref/test_list_print.c:43\n    #7 0x7f2f056f5fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 7 byte(s) in 1 object(s) allocated from:\n    #0 0x7f2f0598a3ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x55f9912ade14 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/reflist.c:118\n    #2 0x55f9912b98d1 in test_list_print tests_ref/test_list_print.c:26\n    #3 0x55f9912b7bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55f9912b80f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55f9912b8b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55f9912b9be6 in main tests_ref/test_list_print.c:43\n    #7 0x7f2f056f5fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 6 byte(s) in 1 object(s) allocated from:\n    #0 0x7f2f0598a3ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x55f9912ade14 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/reflist.c:118\n    #2 0x55f9912b9912 in test_list_print tests_ref/test_list_print.c:27\n    #3 0x55f9912b7bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55f9912b80f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55f9912b8b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55f9912b9be6 in main tests_ref/test_list_print.c:43\n    #7 0x7f2f056f5fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: 92 byte(s) leaked in 6 allocation(s).\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3813178==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x5629e8d0b92f bp 0x7ffcc6c60bf0 sp 0x7ffcc6c60bd0 T0)\n==3813178==The signal is caused by a READ memory access.\n==3813178==Hint: address points to the zero page.\n    #0 0x5629e8d0b92e in list_print parts/gen_list_print.c:43\n    #1 0x5629e8d177a5 in test_list_print_nullhead tests_ref/test_list_print_nullhead.c:23\n    #2 0x5629e8d15bb9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5629e8d160f9 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5629e8d16b27 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5629e8d17954 in main tests_ref/test_list_print_nullhead.c:30\n    #6 0x7f68be11bfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f68be11c07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x5629e8d0b804 in _start (/home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/tests_ref/test_list_print_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_print.c:43 in list_print\n==3813178==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n\n=================================================================\n==3813449==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 24 byte(s) in 1 object(s) allocated from:\n    #0 0x7f8a3d522808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55b8103b9e13 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/reflist.c:114\n    #2 0x55b8103c5937 in test_list_print_longitem tests_ref/test_list_print_longitem.c:28\n    #3 0x55b8103c3bd9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55b8103c4119 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55b8103c4b47 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55b8103c5c48 in main tests_ref/test_list_print_longitem.c:39\n    #7 0x7f8a3d216fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nIndirect leak of 512 byte(s) in 1 object(s) allocated from:\n    #0 0x7f8a3d4ab3ed in __interceptor_strdup ../../../../src/libsanitizer/asan/asan_interceptors.cc:445\n    #1 0x55b8103b9e34 in ref_list_add_item_at_pos /home/gustavo/git/codex_study_grading/repos/f928b19b-6a98-4ed9-9c09-bfdf78073fd2/reflist.c:118\n    #2 0x55b8103c5937 in test_list_print_longitem tests_ref/test_list_print_longitem.c:28\n    #3 0x55b8103c3bd9 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55b8103c4119 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55b8103c4b47 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55b8103c5c48 in main tests_ref/test_list_print_longitem.c:39\n    #7 0x7f8a3d216fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n\nSUMMARY: AddressSanitizer: 536 byte(s) leaked in 2 allocation(s).\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_swap_item_positions_oob": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_save_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_nullfilename": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_longitem": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badparse": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_badfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_load_missingfile": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_single": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_deduplicate_nodups": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        }
    },
    "passed": 1,
    "total": 45,
    "passed_functional": 1,
    "total_functional": 26
}
