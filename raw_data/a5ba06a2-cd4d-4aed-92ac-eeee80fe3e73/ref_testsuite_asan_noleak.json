{
    "results": {
        "test_list_init": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_init_nullhead": {
            "return_code": "skipped: unimplemented",
            "stdout": "",
            "stderr": "",
            "passed": false,
            "skipped": true
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[  FAILED  ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3818989==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x5619cdd4c90d bp 0x7ffef4bb71c0 sp 0x7ffef4bb7170 T0)\n==3818989==The signal is caused by a READ memory access.\n==3818989==Hint: address points to the zero page.\n    #0 0x5619cdd4c90c in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:42\n    #1 0x5619cdd588f8 in test_list_add_item_at_pos_nullhead tests_ref/test_list_add_item_at_pos_nullhead.c:23\n    #2 0x5619cdd56cf3 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x5619cdd57233 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x5619cdd57c61 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x5619cdd58aa7 in main tests_ref/test_list_add_item_at_pos_nullhead.c:30\n    #6 0x7fd4a1180fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7fd4a118107c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x5619cdd4c824 in _start (/home/gustavo/git/codex_study_grading/repos/a5ba06a2-cd4d-4aed-92ac-eeee80fe3e73/tests_ref/test_list_add_item_at_pos_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_add_item_at_pos.c:42 in list_add_item_at_pos\n==3818989==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n[       OK ] test_list_add_item_at_pos_nullitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n",
            "stderr": "=================================================================\n==3819227==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x7ffec0b657d0 in thread T0\n    #0 0x7f19d0ee240f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x5592895bf950 in list_item_to_string parts/gen_list_item_to_string.c:35\n    #2 0x5592895cb928 in test_list_item_to_string tests_ref/test_list_item_to_string.c:27\n    #3 0x5592895c9bd2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5592895ca112 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x5592895cab40 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x5592895cbbbb in main tests_ref/test_list_item_to_string.c:37\n    #7 0x7f19d0bd6fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #8 0x7f19d0bd707c in __libc_start_main_impl ../csu/libc-start.c:409\n    #9 0x5592895bf824 in _start (/home/gustavo/git/codex_study_grading/repos/a5ba06a2-cd4d-4aed-92ac-eeee80fe3e73/tests_ref/test_list_item_to_string.bin+0x6824)\n\nAddress 0x7ffec0b657d0 is located in stack of thread T0 at offset 96 in frame\n    #0 0x5592895cb7b4 in test_list_item_to_string tests_ref/test_list_item_to_string.c:21\n\n  This frame has 2 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str' <== Memory access at offset 96 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: bad-free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122 in __interceptor_free\n==3819227==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n[       OK ] test_list_item_to_string_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3819438==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffddd7718a4 at pc 0x7f46e186a725 bp 0x7ffddd7716b0 sp 0x7ffddd770e40\nWRITE of size 527 at 0x7ffddd7718a4 thread T0\n    #0 0x7f46e186a724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7f46e186abde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x55b936a8a964 in list_item_to_string parts/gen_list_item_to_string.c:34\n    #3 0x55b936a969bf in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x55b936a94bf2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55b936a95132 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55b936a95b60 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55b936a96c74 in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7f46e15cdfcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #9 0x7f46e15ce07c in __libc_start_main_impl ../csu/libc-start.c:409\n    #10 0x55b936a8a844 in _start (/home/gustavo/git/codex_study_grading/repos/a5ba06a2-cd4d-4aed-92ac-eeee80fe3e73/tests_ref/test_list_item_to_string_longstr.bin+0x5844)\n\nAddress 0x7ffddd7718a4 is located in stack of thread T0 at offset 196 in frame\n    #0 0x55b936a967d4 in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:21\n\n  This frame has 3 object(s):\n    [32, 40) 'head'\n    [96, 196) 'str'\n    [256, 768) 'longstr' <== Memory access at offset 196 partially underflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x10003bae62c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003bae62d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003bae62e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003bae62f0: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10003bae6300: 00 f2 f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00\n=>0x10003bae6310: 00 00 00 00[04]f2 f2 f2 f2 f2 f2 f2 00 00 00 00\n  0x10003bae6320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003bae6330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003bae6340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10003bae6350: 00 00 00 00 00 00 00 00 00 00 00 00 f3 f3 f3 f3\n  0x10003bae6360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3819438==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[  FAILED  ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"0: 3 * banana @ $1.00 ea\n1: 2 * orange @ $2.00 ea\n2: 4 * apple @ $3.00 ea\n\" != \"1: 3 * banana @ $1.00 ea\n2: 2 * orange @ $2.00 ea\n3: 4 * apple @ $3.00 ea\n\"\n[   LINE   ] --- tests_ref/test_list_print.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[  FAILED  ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_nullhead.c:23: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_nullhead\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n[  FAILED  ] test_list_update_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n[       OK ] test_list_update_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[       OK ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[  FAILED  ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head->next->next\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n[       OK ] test_list_remove_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[  FAILED  ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos_oob.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1\" != \"item2\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n[       OK ] test_list_swap_item_positions_samepos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n[       OK ] test_list_swap_item_positions_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[       OK ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[  FAILED  ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x3\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[       OK ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[       OK ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[  FAILED  ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0.000000 != 16.000000\n[   LINE   ] --- tests_ref/test_list_cost_sum.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[       OK ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n[  FAILED  ] test_list_cost_sum_nulltotal\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_cost_sum_nulltotal.c:28: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_cost_sum_nulltotal\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[  FAILED  ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1,1.000000,1\n\" != \"item1,1.00,1\n\"\n[   LINE   ] --- tests_ref/test_list_save.c:40: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_save\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3819947==ERROR: AddressSanitizer: SEGV on unknown address 0x55bfc57736c0 (pc 0x7fc70f4bd301 bp 0x7fff65d0b740 sp 0x7fff65d0b040 T0)\n==3819947==The signal is caused by a WRITE memory access.\n    #0 0x7fc70f4bd300 in __vfscanf_internal stdio-common/vfscanf-internal.c:1102\n    #1 0x7fc70f6efa34 in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7fc70f6efb5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x55bfc57629f6 in list_load parts/gen_list_load.c:40\n    #4 0x55bfc576ea2a in test_list_load tests_ref/test_list_load.c:27\n    #5 0x55bfc576ccd2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x55bfc576d212 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x55bfc576dc40 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x55bfc576f53b in main tests_ref/test_list_load.c:53\n    #9 0x7fc70f481fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7fc70f48207c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x55bfc5762824 in _start (/home/gustavo/git/codex_study_grading/repos/a5ba06a2-cd4d-4aed-92ac-eeee80fe3e73/tests_ref/test_list_load.bin+0x6824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdio-common/vfscanf-internal.c:1102 in __vfscanf_internal\n==3819947==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820278==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55725750f938 bp 0x7fff4f7ee250 sp 0x7fff4f7ee210 T0)\n==3820278==The signal is caused by a READ memory access.\n==3820278==Hint: address points to the zero page.\n    #0 0x55725750f937 in list_load parts/gen_list_load.c:36\n    #1 0x55725751b8d0 in test_list_load_nullhead tests_ref/test_list_load_nullhead.c:24\n    #2 0x557257519cd2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55725751a212 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55725751ac40 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55725751ba7f in main tests_ref/test_list_load_nullhead.c:31\n    #6 0x7f566ed62fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f566ed6307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x55725750f824 in _start (/home/gustavo/git/codex_study_grading/repos/a5ba06a2-cd4d-4aed-92ac-eeee80fe3e73/tests_ref/test_list_load_nullhead.bin+0x5824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_load.c:36 in list_load\n==3820278==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n[  FAILED  ] test_list_load_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_load_longitem.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_load_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820495==ERROR: AddressSanitizer: SEGV on unknown address 0x55f076cc96c0 (pc 0x7f4a87eee301 bp 0x7fff4808bbc0 sp 0x7fff4808b4c0 T0)\n==3820495==The signal is caused by a WRITE memory access.\n    #0 0x7f4a87eee300 in __vfscanf_internal stdio-common/vfscanf-internal.c:1102\n    #1 0x7f4a88120a34 in __interceptor___isoc99_vfscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1477\n    #2 0x7f4a88120b5e in __interceptor___isoc99_fscanf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1494\n    #3 0x55f076cb99f6 in list_load parts/gen_list_load.c:40\n    #4 0x55f076cc5a2a in test_list_load_badparse tests_ref/test_list_load_badparse.c:27\n    #5 0x55f076cc3cd2 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #6 0x55f076cc4212 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #7 0x55f076cc4c40 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #8 0x55f076cc5e21 in main tests_ref/test_list_load_badparse.c:39\n    #9 0x7f4a87eb2fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #10 0x7f4a87eb307c in __libc_start_main_impl ../csu/libc-start.c:409\n    #11 0x55f076cb9824 in _start (/home/gustavo/git/codex_study_grading/repos/a5ba06a2-cd4d-4aed-92ac-eeee80fe3e73/tests_ref/test_list_load_badparse.bin+0x6824)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV stdio-common/vfscanf-internal.c:1102 in __vfscanf_internal\n==3820495==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0xb\n[   LINE   ] --- tests_ref/test_list_deduplicate.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3820863==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x559f76b288d9 bp 0x7ffef5e7cc60 sp 0x7ffef5e7cc60 T0)\n==3820863==The signal is caused by a READ memory access.\n==3820863==Hint: address points to the zero page.\n    #0 0x559f76b288d8 in list_deduplicate parts/gen_list_deduplicate.c:35\n    #1 0x559f76b3480e in test_list_deduplicate_nullhead tests_ref/test_list_deduplicate_nullhead.c:23\n    #2 0x559f76b32c22 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x559f76b33162 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x559f76b33b90 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x559f76b349bd in main tests_ref/test_list_deduplicate_nullhead.c:30\n    #6 0x7f744c6c8fcf in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58\n    #7 0x7f744c6c907c in __libc_start_main_impl ../csu/libc-start.c:409\n    #8 0x559f76b28804 in _start (/home/gustavo/git/codex_study_grading/repos/a5ba06a2-cd4d-4aed-92ac-eeee80fe3e73/tests_ref/test_list_deduplicate_nullhead.bin+0x5804)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_deduplicate.c:35 in list_deduplicate\n==3820863==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 20,
    "total": 45,
    "passed_functional": 7,
    "total_functional": 26
}
