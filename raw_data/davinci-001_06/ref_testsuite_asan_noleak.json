{
    "results": {
        "test_list_init": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init\n[  FAILED  ] test_list_init\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- head\n[   LINE   ] --- tests_ref/test_list_init.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_init\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_init_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_init_nullhead\n[       OK ] test_list_init_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos\n[  FAILED  ] test_list_add_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullhead\n[       OK ] test_list_add_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_add_item_at_pos_nullitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_nullitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3033803==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f232f73d6e5 bp 0x7ffcf2f6cea0 sp 0x7ffcf2f6c618 T0)\n==3033803==The signal is caused by a READ memory access.\n==3033803==Hint: address points to the zero page.\n    #0 0x7f232f73d6e4  (/lib/x86_64-linux-gnu/libc.so.6+0x1886e4)\n    #1 0x7f232f80e90b in __interceptor_strlen ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:352\n    #2 0x55a55d8b79cb in list_add_item_at_pos parts/gen_list_add_item_at_pos.c:58\n    #3 0x55a55d8c39ba in test_list_add_item_at_pos_nullitem tests_ref/test_list_add_item_at_pos_nullitem.c:25\n    #4 0x55a55d8c1caa in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55a55d8c21df in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55a55d8c2c23 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55a55d8c3bd3 in main tests_ref/test_list_add_item_at_pos_nullitem.c:32\n    #8 0x7f232f5d9082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x55a55d8b780d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_06/tests_ref/test_list_add_item_at_pos_nullitem.bin+0x580d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libc.so.6+0x1886e4) \n==3033803==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_add_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_add_item_at_pos_oob\n[  FAILED  ] test_list_add_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_add_item_at_pos_oob.c:25: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_add_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_item_to_string": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string\n[       OK ] test_list_item_to_string\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullhead\n[       OK ] test_list_item_to_string_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_nullstr": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_nullstr\n[       OK ] test_list_item_to_string_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_item_to_string_longstr": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_item_to_string_longstr\n",
            "stderr": "=================================================================\n==3034372==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60b000000154 at pc 0x7fc35f31b725 bp 0x7ffda2ea6a50 sp 0x7ffda2ea61e0\nWRITE of size 527 at 0x60b000000154 thread T0\n    #0 0x7fc35f31b724 in __interceptor_vsprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627\n    #1 0x7fc35f31bbde in __interceptor_sprintf ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1670\n    #2 0x55f46b0289aa in list_item_to_string parts/gen_list_item_to_string.c:38\n    #3 0x55f46b034a2e in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #4 0x55f46b032c10 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #5 0x55f46b033145 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #6 0x55f46b033b89 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #7 0x55f46b034cfc in main tests_ref/test_list_item_to_string_longstr.c:38\n    #8 0x7fc35f0af082 in __libc_start_main ../csu/libc-start.c:308\n    #9 0x55f46b02886d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_06/tests_ref/test_list_item_to_string_longstr.bin+0x586d)\n\n0x60b000000154 is located 0 bytes to the right of 100-byte region [0x60b0000000f0,0x60b000000154)\nallocated by thread T0 here:\n    #0 0x7fc35f38a808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55f46b028965 in list_item_to_string parts/gen_list_item_to_string.c:34\n    #2 0x55f46b034a2e in test_list_item_to_string_longstr tests_ref/test_list_item_to_string_longstr.c:30\n    #3 0x55f46b032c10 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55f46b033145 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55f46b033b89 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55f46b034cfc in main tests_ref/test_list_item_to_string_longstr.c:38\n    #7 0x7fc35f0af082 in __libc_start_main ../csu/libc-start.c:308\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1627 in __interceptor_vsprintf\nShadow bytes around the buggy address:\n  0x0c167fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c167fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c167fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c167fff8000: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd\n  0x0c167fff8010: fd fd fd fd fd fa fa fa fa fa fa fa fa fa 00 00\n=>0x0c167fff8020: 00 00 00 00 00 00 00 00 00 00[04]fa fa fa fa fa\n  0x0c167fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c167fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==3034372==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print\n[  FAILED  ] test_list_print\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"3 * banana @ $1.00 ea\n2 * orange @ $2.00 ea\n\" != \"1: 3 * banana @ $1.00 ea\n2: 2 * orange @ $2.00 ea\n3: 4 * apple @ $3.00 ea\n\"\n[   LINE   ] --- tests_ref/test_list_print.c:34: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_print_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_nullhead\n[       OK ] test_list_print_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_print_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_print_longitem\n[  FAILED  ] test_list_print_longitem\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_print_longitem.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_print_longitem\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos\n[  FAILED  ] test_list_update_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullhead\n[       OK ] test_list_update_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos_nullstr": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_nullstr\n[       OK ] test_list_update_item_at_pos_nullstr\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_update_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_update_item_at_pos_oob\n[  FAILED  ] test_list_update_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_update_item_at_pos_oob.c:27: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_update_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos\n[  FAILED  ] test_list_remove_item_at_pos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x1 != 0\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_remove_item_at_pos_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_nullhead\n[       OK ] test_list_remove_item_at_pos_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_remove_item_at_pos_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_remove_item_at_pos_oob\n[  FAILED  ] test_list_remove_item_at_pos_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_remove_item_at_pos_oob.c:26: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_remove_item_at_pos_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions\n[  FAILED  ] test_list_swap_item_positions\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- \"item1\" != \"item2\"\n[   LINE   ] --- tests_ref/test_list_swap_item_positions.c:29: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_samepos": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_samepos\n",
            "stderr": "=================================================================\n==3034828==ERROR: AddressSanitizer: strcpy-param-overlap: memory ranges [0x602000000050,0x602000000057) and [0x602000000050, 0x602000000057) overlap\n    #0 0x7efed960df01 in __interceptor_strcpy ../../../../src/libsanitizer/asan/asan_interceptors.cc:429\n    #1 0x55d3646919e7 in list_swap_item_positions parts/gen_list_swap_item_positions.c:55\n    #2 0x55d36469da44 in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:27\n    #3 0x55d36469bcbf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55d36469c1f4 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55d36469cc38 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55d36469dd6f in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #7 0x7efed93a4082 in __libc_start_main ../csu/libc-start.c:308\n    #8 0x55d36469182d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_06/tests_ref/test_list_swap_item_positions_samepos.bin+0x682d)\n\n0x602000000056 is located 0 bytes to the right of 6-byte region [0x602000000050,0x602000000056)\nallocated by thread T0 here:\n    #0 0x7efed967f808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55d3646919ae in list_swap_item_positions parts/gen_list_swap_item_positions.c:51\n    #2 0x55d36469da44 in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:27\n    #3 0x55d36469bcbf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55d36469c1f4 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55d36469cc38 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55d36469dd6f in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #7 0x7efed93a4082 in __libc_start_main ../csu/libc-start.c:308\n\n0x602000000056 is located 0 bytes to the right of 6-byte region [0x602000000050,0x602000000056)\nallocated by thread T0 here:\n    #0 0x7efed967f808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144\n    #1 0x55d3646919ae in list_swap_item_positions parts/gen_list_swap_item_positions.c:51\n    #2 0x55d36469da44 in test_list_swap_item_positions_samepos tests_ref/test_list_swap_item_positions_samepos.c:27\n    #3 0x55d36469bcbf in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55d36469c1f4 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55d36469cc38 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55d36469dd6f in main tests_ref/test_list_swap_item_positions_samepos.c:38\n    #7 0x7efed93a4082 in __libc_start_main ../csu/libc-start.c:308\n\nSUMMARY: AddressSanitizer: strcpy-param-overlap ../../../../src/libsanitizer/asan/asan_interceptors.cc:429 in __interceptor_strcpy\n==3034828==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_swap_item_positions_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_nullhead\n[       OK ] test_list_swap_item_positions_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_swap_item_positions_oob": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_swap_item_positions_oob\n[  FAILED  ] test_list_swap_item_positions_oob\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0x1\n[   LINE   ] --- tests_ref/test_list_swap_item_positions_oob.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_swap_item_positions_oob\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position\n[  FAILED  ] test_list_find_highest_price_item_position\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0x2 != 0x3\n[   LINE   ] --- tests_ref/test_list_find_highest_price_item_position.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_find_highest_price_item_position\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullhead\n[       OK ] test_list_find_highest_price_item_position_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_find_highest_price_item_position_nullpos": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_find_highest_price_item_position_nullpos\n[       OK ] test_list_find_highest_price_item_position_nullpos\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum\n[       OK ] test_list_cost_sum\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nullhead\n[       OK ] test_list_cost_sum_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_cost_sum_nulltotal": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_cost_sum_nulltotal\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3035355==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55d1bf6428f7 bp 0x7fff071fe860 sp 0x7fff071fe860 T0)\n==3035355==The signal is caused by a WRITE memory access.\n==3035355==Hint: address points to the zero page.\n    #0 0x55d1bf6428f6 in list_cost_sum parts/gen_list_cost_sum.c:29\n    #1 0x55d1bf64e967 in test_list_cost_sum_nulltotal tests_ref/test_list_cost_sum_nulltotal.c:28\n    #2 0x55d1bf64cb82 in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #3 0x55d1bf64d0b7 in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #4 0x55d1bf64dafb in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #5 0x55d1bf64eba6 in main tests_ref/test_list_cost_sum_nulltotal.c:36\n    #6 0x7f1d73cb4082 in __libc_start_main ../csu/libc-start.c:308\n    #7 0x55d1bf64280d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_06/tests_ref/test_list_cost_sum_nulltotal.bin+0x680d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV parts/gen_list_cost_sum.c:29 in list_cost_sum\n==3035355==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_save": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save\n[       OK ] test_list_save\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullhead\n[       OK ] test_list_save_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_nullfilename\n[       OK ] test_list_save_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_save_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_save_badfile\n[       OK ] test_list_save_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3035663==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55ad8df2bc42 bp 0x7ffdf7482a60 sp 0x7ffdf74829c0 T0)\n==3035663==The signal is caused by a READ memory access.\n==3035663==Hint: address points to the zero page.\n    #0 0x55ad8df2bc41 in test_list_load tests_ref/test_list_load.c:36\n    #1 0x55ad8df29cca in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #2 0x55ad8df2a1ff in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #3 0x55ad8df2ac43 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #4 0x55ad8df2c590 in main tests_ref/test_list_load.c:53\n    #5 0x7fa1cb4c6082 in __libc_start_main ../csu/libc-start.c:308\n    #6 0x55ad8df1f88d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_06/tests_ref/test_list_load.bin+0x688d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV tests_ref/test_list_load.c:36 in test_list_load\n==3035663==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullhead\n[       OK ] test_list_load_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_nullfilename": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_nullfilename\n[       OK ] test_list_load_nullfilename\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_longitem": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_longitem\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3036041==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fe307e33c3b bp 0x7ffe6c270d50 sp 0x7ffe6c270890 T0)\n==3036041==The signal is caused by a READ memory access.\n==3036041==Hint: address points to the zero page.\n    #0 0x7fe307e33c3a in __GI_____strtod_l_internal /build/glibc-SzIz7B/glibc-2.31/stdlib/strtod_l.c:611\n    #1 0x55b0119cea36 in list_load parts/gen_list_load.c:47\n    #2 0x55b0119daac5 in test_list_load_longitem tests_ref/test_list_load_longitem.c:29\n    #3 0x55b0119d8cea in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x55b0119d921f in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x55b0119d9c63 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x55b0119daee2 in main tests_ref/test_list_load_longitem.c:40\n    #7 0x7fe307e0b082 in __libc_start_main ../csu/libc-start.c:308\n    #8 0x55b0119ce8ad in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_06/tests_ref/test_list_load_longitem.bin+0x68ad)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV /build/glibc-SzIz7B/glibc-2.31/stdlib/strtod_l.c:611 in __GI_____strtod_l_internal\n==3036041==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badparse": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badparse\n",
            "stderr": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==3036301==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fcb4085fc3b bp 0x7ffd53ecd290 sp 0x7ffd53eccdd0 T0)\n==3036301==The signal is caused by a READ memory access.\n==3036301==Hint: address points to the zero page.\n    #0 0x7fcb4085fc3a in __GI_____strtod_l_internal /build/glibc-SzIz7B/glibc-2.31/stdlib/strtod_l.c:611\n    #1 0x565250207a16 in list_load parts/gen_list_load.c:47\n    #2 0x565250213a5f in test_list_load_badparse tests_ref/test_list_load_badparse.c:27\n    #3 0x565250211cca in cmocka_run_one_test_or_fixture cmocka/cmocka.c:2937\n    #4 0x5652502121ff in cmocka_run_one_tests cmocka/cmocka.c:3045\n    #5 0x565250212c43 in _cmocka_run_group_tests cmocka/cmocka.c:3176\n    #6 0x565250213e70 in main tests_ref/test_list_load_badparse.c:39\n    #7 0x7fcb40837082 in __libc_start_main ../csu/libc-start.c:308\n    #8 0x56525020788d in _start (/home/moyix/git/codex_study_grading/repos/davinci-001_06/tests_ref/test_list_load_badparse.bin+0x688d)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV /build/glibc-SzIz7B/glibc-2.31/stdlib/strtod_l.c:611 in __GI_____strtod_l_internal\n==3036301==ABORTING\n",
            "passed": false,
            "skipped": false
        },
        "test_list_load_badfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_badfile\n[       OK ] test_list_load_badfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_load_missingfile": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_load_missingfile\n[       OK ] test_list_load_missingfile\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate": {
            "return_code": 1,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate\n[  FAILED  ] test_list_deduplicate\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  ERROR   ] --- 0 != 0xb\n[   LINE   ] --- tests_ref/test_list_deduplicate.c:30: error: Failure!\n[  PASSED  ] 0 test(s).\n[  FAILED  ] tests: 1 test(s), listed below:\n[  FAILED  ] test_list_deduplicate\n\n 1 FAILED TEST(S)\n\nSummary: [X]\n\n",
            "passed": false,
            "skipped": false
        },
        "test_list_deduplicate_nullhead": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nullhead\n[       OK ] test_list_deduplicate_nullhead\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_single": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_single\n[       OK ] test_list_deduplicate_single\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        },
        "test_list_deduplicate_nodups": {
            "return_code": 0,
            "stdout": "[==========] tests: Running 1 test(s).\n[ RUN      ] test_list_deduplicate_nodups\n[       OK ] test_list_deduplicate_nodups\n[==========] tests: 1 test(s) run.\n",
            "stderr": "[  PASSED  ] 1 test(s).\n\nSummary: [#]\n\n",
            "passed": true,
            "skipped": false
        }
    },
    "passed": 25,
    "total": 45,
    "passed_functional": 8,
    "total_functional": 26
}
